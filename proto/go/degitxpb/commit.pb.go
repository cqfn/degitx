// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: commit.proto

package degitxpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TODO: Replace this enum with ObjectType in shared.proto
type TreeEntryResponse_ObjectType int32

const (
	TreeEntryResponse_COMMIT TreeEntryResponse_ObjectType = 0
	TreeEntryResponse_BLOB   TreeEntryResponse_ObjectType = 1
	TreeEntryResponse_TREE   TreeEntryResponse_ObjectType = 2
	TreeEntryResponse_TAG    TreeEntryResponse_ObjectType = 3
)

// Enum value maps for TreeEntryResponse_ObjectType.
var (
	TreeEntryResponse_ObjectType_name = map[int32]string{
		0: "COMMIT",
		1: "BLOB",
		2: "TREE",
		3: "TAG",
	}
	TreeEntryResponse_ObjectType_value = map[string]int32{
		"COMMIT": 0,
		"BLOB":   1,
		"TREE":   2,
		"TAG":    3,
	}
)

func (x TreeEntryResponse_ObjectType) Enum() *TreeEntryResponse_ObjectType {
	p := new(TreeEntryResponse_ObjectType)
	*p = x
	return p
}

func (x TreeEntryResponse_ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreeEntryResponse_ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_commit_proto_enumTypes[0].Descriptor()
}

func (TreeEntryResponse_ObjectType) Type() protoreflect.EnumType {
	return &file_commit_proto_enumTypes[0]
}

func (x TreeEntryResponse_ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TreeEntryResponse_ObjectType.Descriptor instead.
func (TreeEntryResponse_ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{5, 0}
}

// TODO: Replace this enum with ObjectType in shared.proto
type TreeEntry_EntryType int32

const (
	TreeEntry_BLOB   TreeEntry_EntryType = 0
	TreeEntry_TREE   TreeEntry_EntryType = 1
	TreeEntry_COMMIT TreeEntry_EntryType = 3
)

// Enum value maps for TreeEntry_EntryType.
var (
	TreeEntry_EntryType_name = map[int32]string{
		0: "BLOB",
		1: "TREE",
		3: "COMMIT",
	}
	TreeEntry_EntryType_value = map[string]int32{
		"BLOB":   0,
		"TREE":   1,
		"COMMIT": 3,
	}
)

func (x TreeEntry_EntryType) Enum() *TreeEntry_EntryType {
	p := new(TreeEntry_EntryType)
	*p = x
	return p
}

func (x TreeEntry_EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreeEntry_EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_commit_proto_enumTypes[1].Descriptor()
}

func (TreeEntry_EntryType) Type() protoreflect.EnumType {
	return &file_commit_proto_enumTypes[1]
}

func (x TreeEntry_EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TreeEntry_EntryType.Descriptor instead.
func (TreeEntry_EntryType) EnumDescriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{12, 0}
}

type FindAllCommitsRequest_Order int32

const (
	FindAllCommitsRequest_NONE FindAllCommitsRequest_Order = 0
	FindAllCommitsRequest_TOPO FindAllCommitsRequest_Order = 1
	FindAllCommitsRequest_DATE FindAllCommitsRequest_Order = 2
)

// Enum value maps for FindAllCommitsRequest_Order.
var (
	FindAllCommitsRequest_Order_name = map[int32]string{
		0: "NONE",
		1: "TOPO",
		2: "DATE",
	}
	FindAllCommitsRequest_Order_value = map[string]int32{
		"NONE": 0,
		"TOPO": 1,
		"DATE": 2,
	}
)

func (x FindAllCommitsRequest_Order) Enum() *FindAllCommitsRequest_Order {
	p := new(FindAllCommitsRequest_Order)
	*p = x
	return p
}

func (x FindAllCommitsRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindAllCommitsRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_commit_proto_enumTypes[2].Descriptor()
}

func (FindAllCommitsRequest_Order) Type() protoreflect.EnumType {
	return &file_commit_proto_enumTypes[2]
}

func (x FindAllCommitsRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindAllCommitsRequest_Order.Descriptor instead.
func (FindAllCommitsRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{23, 0}
}

type FindCommitsRequest_Order int32

const (
	FindCommitsRequest_NONE FindCommitsRequest_Order = 0
	FindCommitsRequest_TOPO FindCommitsRequest_Order = 1
)

// Enum value maps for FindCommitsRequest_Order.
var (
	FindCommitsRequest_Order_name = map[int32]string{
		0: "NONE",
		1: "TOPO",
	}
	FindCommitsRequest_Order_value = map[string]int32{
		"NONE": 0,
		"TOPO": 1,
	}
)

func (x FindCommitsRequest_Order) Enum() *FindCommitsRequest_Order {
	p := new(FindCommitsRequest_Order)
	*p = x
	return p
}

func (x FindCommitsRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindCommitsRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_commit_proto_enumTypes[3].Descriptor()
}

func (FindCommitsRequest_Order) Type() protoreflect.EnumType {
	return &file_commit_proto_enumTypes[3]
}

func (x FindCommitsRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindCommitsRequest_Order.Descriptor instead.
func (FindCommitsRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{25, 0}
}

type CommitStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *CommitStatsRequest) Reset() {
	*x = CommitStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStatsRequest) ProtoMessage() {}

func (x *CommitStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStatsRequest.ProtoReflect.Descriptor instead.
func (*CommitStatsRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{0}
}

func (x *CommitStatsRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CommitStatsRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

type CommitStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OID is the commit. Empty means not found
	Oid       string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Additions int32  `protobuf:"varint,2,opt,name=additions,proto3" json:"additions,omitempty"`
	Deletions int32  `protobuf:"varint,3,opt,name=deletions,proto3" json:"deletions,omitempty"`
}

func (x *CommitStatsResponse) Reset() {
	*x = CommitStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStatsResponse) ProtoMessage() {}

func (x *CommitStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStatsResponse.ProtoReflect.Descriptor instead.
func (*CommitStatsResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{1}
}

func (x *CommitStatsResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *CommitStatsResponse) GetAdditions() int32 {
	if x != nil {
		return x.Additions
	}
	return 0
}

func (x *CommitStatsResponse) GetDeletions() int32 {
	if x != nil {
		return x.Deletions
	}
	return 0
}

type CommitIsAncestorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	AncestorId string      `protobuf:"bytes,2,opt,name=ancestor_id,json=ancestorId,proto3" json:"ancestor_id,omitempty"`
	ChildId    string      `protobuf:"bytes,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
}

func (x *CommitIsAncestorRequest) Reset() {
	*x = CommitIsAncestorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitIsAncestorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitIsAncestorRequest) ProtoMessage() {}

func (x *CommitIsAncestorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitIsAncestorRequest.ProtoReflect.Descriptor instead.
func (*CommitIsAncestorRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{2}
}

func (x *CommitIsAncestorRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CommitIsAncestorRequest) GetAncestorId() string {
	if x != nil {
		return x.AncestorId
	}
	return ""
}

func (x *CommitIsAncestorRequest) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

type CommitIsAncestorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CommitIsAncestorResponse) Reset() {
	*x = CommitIsAncestorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitIsAncestorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitIsAncestorResponse) ProtoMessage() {}

func (x *CommitIsAncestorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitIsAncestorResponse.ProtoReflect.Descriptor instead.
func (*CommitIsAncestorResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{3}
}

func (x *CommitIsAncestorResponse) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type TreeEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// commit ID or refname
	Revision []byte `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// entry path relative to repository root
	Path  []byte `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Limit int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TreeEntryRequest) Reset() {
	*x = TreeEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeEntryRequest) ProtoMessage() {}

func (x *TreeEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeEntryRequest.ProtoReflect.Descriptor instead.
func (*TreeEntryRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{4}
}

func (x *TreeEntryRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *TreeEntryRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *TreeEntryRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TreeEntryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TreeEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TreeEntryResponse_ObjectType `protobuf:"varint,1,opt,name=type,proto3,enum=degitx.TreeEntryResponse_ObjectType" json:"type,omitempty"`
	// SHA1 object ID
	Oid  string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Size int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// file mode
	Mode int32 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// raw object contents
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TreeEntryResponse) Reset() {
	*x = TreeEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeEntryResponse) ProtoMessage() {}

func (x *TreeEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeEntryResponse.ProtoReflect.Descriptor instead.
func (*TreeEntryResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{5}
}

func (x *TreeEntryResponse) GetType() TreeEntryResponse_ObjectType {
	if x != nil {
		return x.Type
	}
	return TreeEntryResponse_COMMIT
}

func (x *TreeEntryResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *TreeEntryResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TreeEntryResponse) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *TreeEntryResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommitsBetweenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	From       []byte      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To         []byte      `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *CommitsBetweenRequest) Reset() {
	*x = CommitsBetweenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitsBetweenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitsBetweenRequest) ProtoMessage() {}

func (x *CommitsBetweenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitsBetweenRequest.ProtoReflect.Descriptor instead.
func (*CommitsBetweenRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{6}
}

func (x *CommitsBetweenRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CommitsBetweenRequest) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CommitsBetweenRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

type CommitsBetweenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*GitCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *CommitsBetweenResponse) Reset() {
	*x = CommitsBetweenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitsBetweenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitsBetweenResponse) ProtoMessage() {}

func (x *CommitsBetweenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitsBetweenResponse.ProtoReflect.Descriptor instead.
func (*CommitsBetweenResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{7}
}

func (x *CommitsBetweenResponse) GetCommits() []*GitCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type CountCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository          `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   []byte               `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	After      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	Before     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	Path       []byte               `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	MaxCount   int32                `protobuf:"varint,6,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// all and revision are mutually exclusive
	All           bool           `protobuf:"varint,7,opt,name=all,proto3" json:"all,omitempty"`
	FirstParent   bool           `protobuf:"varint,8,opt,name=first_parent,json=firstParent,proto3" json:"first_parent,omitempty"`
	GlobalOptions *GlobalOptions `protobuf:"bytes,9,opt,name=global_options,json=globalOptions,proto3" json:"global_options,omitempty"`
}

func (x *CountCommitsRequest) Reset() {
	*x = CountCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCommitsRequest) ProtoMessage() {}

func (x *CountCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCommitsRequest.ProtoReflect.Descriptor instead.
func (*CountCommitsRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{8}
}

func (x *CountCommitsRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CountCommitsRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *CountCommitsRequest) GetAfter() *timestamp.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountCommitsRequest) GetBefore() *timestamp.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountCommitsRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CountCommitsRequest) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *CountCommitsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *CountCommitsRequest) GetFirstParent() bool {
	if x != nil {
		return x.FirstParent
	}
	return false
}

func (x *CountCommitsRequest) GetGlobalOptions() *GlobalOptions {
	if x != nil {
		return x.GlobalOptions
	}
	return nil
}

type CountCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountCommitsResponse) Reset() {
	*x = CountCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCommitsResponse) ProtoMessage() {}

func (x *CountCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCommitsResponse.ProtoReflect.Descriptor instead.
func (*CountCommitsResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{9}
}

func (x *CountCommitsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CountDivergingCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	From       []byte      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To         []byte      `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	MaxCount   int32       `protobuf:"varint,7,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *CountDivergingCommitsRequest) Reset() {
	*x = CountDivergingCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDivergingCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDivergingCommitsRequest) ProtoMessage() {}

func (x *CountDivergingCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDivergingCommitsRequest.ProtoReflect.Descriptor instead.
func (*CountDivergingCommitsRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{10}
}

func (x *CountDivergingCommitsRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CountDivergingCommitsRequest) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CountDivergingCommitsRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CountDivergingCommitsRequest) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

type CountDivergingCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftCount  int32 `protobuf:"varint,1,opt,name=left_count,json=leftCount,proto3" json:"left_count,omitempty"`
	RightCount int32 `protobuf:"varint,2,opt,name=right_count,json=rightCount,proto3" json:"right_count,omitempty"`
}

func (x *CountDivergingCommitsResponse) Reset() {
	*x = CountDivergingCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDivergingCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDivergingCommitsResponse) ProtoMessage() {}

func (x *CountDivergingCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDivergingCommitsResponse.ProtoReflect.Descriptor instead.
func (*CountDivergingCommitsResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{11}
}

func (x *CountDivergingCommitsResponse) GetLeftCount() int32 {
	if x != nil {
		return x.LeftCount
	}
	return 0
}

func (x *CountDivergingCommitsResponse) GetRightCount() int32 {
	if x != nil {
		return x.RightCount
	}
	return 0
}

type TreeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OID of the object this tree entry points to
	Oid string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// OID of the tree attached to commit_oid
	RootOid string `protobuf:"bytes,2,opt,name=root_oid,json=rootOid,proto3" json:"root_oid,omitempty"`
	// Path relative to repository root
	Path []byte              `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Type TreeEntry_EntryType `protobuf:"varint,4,opt,name=type,proto3,enum=degitx.TreeEntry_EntryType" json:"type,omitempty"`
	// File mode e.g. 0644
	Mode int32 `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	// The commit object via which this entry was retrieved
	CommitOid string `protobuf:"bytes,6,opt,name=commit_oid,json=commitOid,proto3" json:"commit_oid,omitempty"`
	// Relative path of the first subdir that doesn't have only one directory descendant
	FlatPath []byte `protobuf:"bytes,7,opt,name=flat_path,json=flatPath,proto3" json:"flat_path,omitempty"`
}

func (x *TreeEntry) Reset() {
	*x = TreeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeEntry) ProtoMessage() {}

func (x *TreeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeEntry.ProtoReflect.Descriptor instead.
func (*TreeEntry) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{12}
}

func (x *TreeEntry) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *TreeEntry) GetRootOid() string {
	if x != nil {
		return x.RootOid
	}
	return ""
}

func (x *TreeEntry) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TreeEntry) GetType() TreeEntry_EntryType {
	if x != nil {
		return x.Type
	}
	return TreeEntry_BLOB
}

func (x *TreeEntry) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *TreeEntry) GetCommitOid() string {
	if x != nil {
		return x.CommitOid
	}
	return ""
}

func (x *TreeEntry) GetFlatPath() []byte {
	if x != nil {
		return x.FlatPath
	}
	return nil
}

type GetTreeEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Path       []byte      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Recursive  bool        `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *GetTreeEntriesRequest) Reset() {
	*x = GetTreeEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeEntriesRequest) ProtoMessage() {}

func (x *GetTreeEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeEntriesRequest.ProtoReflect.Descriptor instead.
func (*GetTreeEntriesRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{13}
}

func (x *GetTreeEntriesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *GetTreeEntriesRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *GetTreeEntriesRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetTreeEntriesRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type GetTreeEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*TreeEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetTreeEntriesResponse) Reset() {
	*x = GetTreeEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeEntriesResponse) ProtoMessage() {}

func (x *GetTreeEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeEntriesResponse.ProtoReflect.Descriptor instead.
func (*GetTreeEntriesResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{14}
}

func (x *GetTreeEntriesResponse) GetEntries() []*TreeEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{15}
}

func (x *ListFilesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *ListFilesRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

// A single 'page' of the paginated response
type ListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remember to force encoding utf-8 on the client side
	Paths [][]byte `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{16}
}

func (x *ListFilesResponse) GetPaths() [][]byte {
	if x != nil {
		return x.Paths
	}
	return nil
}

type FindCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *FindCommitRequest) Reset() {
	*x = FindCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCommitRequest) ProtoMessage() {}

func (x *FindCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCommitRequest.ProtoReflect.Descriptor instead.
func (*FindCommitRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{17}
}

func (x *FindCommitRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FindCommitRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

type FindCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commit is nil when the commit was not found
	Commit *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *FindCommitResponse) Reset() {
	*x = FindCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCommitResponse) ProtoMessage() {}

func (x *FindCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCommitResponse.ProtoReflect.Descriptor instead.
func (*FindCommitResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{18}
}

func (x *FindCommitResponse) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type ListCommitsByOidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Oid        []string    `protobuf:"bytes,2,rep,name=oid,proto3" json:"oid,omitempty"`
}

func (x *ListCommitsByOidRequest) Reset() {
	*x = ListCommitsByOidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsByOidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsByOidRequest) ProtoMessage() {}

func (x *ListCommitsByOidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsByOidRequest.ProtoReflect.Descriptor instead.
func (*ListCommitsByOidRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{19}
}

func (x *ListCommitsByOidRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *ListCommitsByOidRequest) GetOid() []string {
	if x != nil {
		return x.Oid
	}
	return nil
}

type ListCommitsByOidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*GitCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *ListCommitsByOidResponse) Reset() {
	*x = ListCommitsByOidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsByOidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsByOidResponse) ProtoMessage() {}

func (x *ListCommitsByOidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsByOidResponse.ProtoReflect.Descriptor instead.
func (*ListCommitsByOidResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{20}
}

func (x *ListCommitsByOidResponse) GetCommits() []*GitCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type ListCommitsByRefNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RefNames   [][]byte    `protobuf:"bytes,2,rep,name=ref_names,json=refNames,proto3" json:"ref_names,omitempty"`
}

func (x *ListCommitsByRefNameRequest) Reset() {
	*x = ListCommitsByRefNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsByRefNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsByRefNameRequest) ProtoMessage() {}

func (x *ListCommitsByRefNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsByRefNameRequest.ProtoReflect.Descriptor instead.
func (*ListCommitsByRefNameRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{21}
}

func (x *ListCommitsByRefNameRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *ListCommitsByRefNameRequest) GetRefNames() [][]byte {
	if x != nil {
		return x.RefNames
	}
	return nil
}

type ListCommitsByRefNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitRefs []*ListCommitsByRefNameResponse_CommitForRef `protobuf:"bytes,2,rep,name=commit_refs,json=commitRefs,proto3" json:"commit_refs,omitempty"`
}

func (x *ListCommitsByRefNameResponse) Reset() {
	*x = ListCommitsByRefNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsByRefNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsByRefNameResponse) ProtoMessage() {}

func (x *ListCommitsByRefNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsByRefNameResponse.ProtoReflect.Descriptor instead.
func (*ListCommitsByRefNameResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{22}
}

func (x *ListCommitsByRefNameResponse) GetCommitRefs() []*ListCommitsByRefNameResponse_CommitForRef {
	if x != nil {
		return x.CommitRefs
	}
	return nil
}

type FindAllCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// When nil, return all commits reachable by any branch in the repo
	Revision []byte                      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	MaxCount int32                       `protobuf:"varint,3,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	Skip     int32                       `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
	Order    FindAllCommitsRequest_Order `protobuf:"varint,5,opt,name=order,proto3,enum=degitx.FindAllCommitsRequest_Order" json:"order,omitempty"`
}

func (x *FindAllCommitsRequest) Reset() {
	*x = FindAllCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllCommitsRequest) ProtoMessage() {}

func (x *FindAllCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllCommitsRequest.ProtoReflect.Descriptor instead.
func (*FindAllCommitsRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{23}
}

func (x *FindAllCommitsRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FindAllCommitsRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *FindAllCommitsRequest) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *FindAllCommitsRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *FindAllCommitsRequest) GetOrder() FindAllCommitsRequest_Order {
	if x != nil {
		return x.Order
	}
	return FindAllCommitsRequest_NONE
}

// A single 'page' of the result set
type FindAllCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*GitCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *FindAllCommitsResponse) Reset() {
	*x = FindAllCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllCommitsResponse) ProtoMessage() {}

func (x *FindAllCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllCommitsResponse.ProtoReflect.Descriptor instead.
func (*FindAllCommitsResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{24}
}

func (x *FindAllCommitsResponse) GetCommits() []*GitCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type FindCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository  *Repository          `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision    []byte               `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Limit       int32                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32                `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Paths       [][]byte             `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
	Follow      bool                 `protobuf:"varint,6,opt,name=follow,proto3" json:"follow,omitempty"`
	SkipMerges  bool                 `protobuf:"varint,7,opt,name=skip_merges,json=skipMerges,proto3" json:"skip_merges,omitempty"`
	DisableWalk bool                 `protobuf:"varint,8,opt,name=disable_walk,json=disableWalk,proto3" json:"disable_walk,omitempty"`
	After       *timestamp.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	Before      *timestamp.Timestamp `protobuf:"bytes,10,opt,name=before,proto3" json:"before,omitempty"`
	// all and revision are mutually exclusive
	All           bool                     `protobuf:"varint,11,opt,name=all,proto3" json:"all,omitempty"`
	FirstParent   bool                     `protobuf:"varint,12,opt,name=first_parent,json=firstParent,proto3" json:"first_parent,omitempty"`
	Author        []byte                   `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"`
	Order         FindCommitsRequest_Order `protobuf:"varint,14,opt,name=order,proto3,enum=degitx.FindCommitsRequest_Order" json:"order,omitempty"`
	GlobalOptions *GlobalOptions           `protobuf:"bytes,15,opt,name=global_options,json=globalOptions,proto3" json:"global_options,omitempty"`
}

func (x *FindCommitsRequest) Reset() {
	*x = FindCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCommitsRequest) ProtoMessage() {}

func (x *FindCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCommitsRequest.ProtoReflect.Descriptor instead.
func (*FindCommitsRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{25}
}

func (x *FindCommitsRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FindCommitsRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *FindCommitsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindCommitsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FindCommitsRequest) GetPaths() [][]byte {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *FindCommitsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

func (x *FindCommitsRequest) GetSkipMerges() bool {
	if x != nil {
		return x.SkipMerges
	}
	return false
}

func (x *FindCommitsRequest) GetDisableWalk() bool {
	if x != nil {
		return x.DisableWalk
	}
	return false
}

func (x *FindCommitsRequest) GetAfter() *timestamp.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *FindCommitsRequest) GetBefore() *timestamp.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *FindCommitsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *FindCommitsRequest) GetFirstParent() bool {
	if x != nil {
		return x.FirstParent
	}
	return false
}

func (x *FindCommitsRequest) GetAuthor() []byte {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *FindCommitsRequest) GetOrder() FindCommitsRequest_Order {
	if x != nil {
		return x.Order
	}
	return FindCommitsRequest_NONE
}

func (x *FindCommitsRequest) GetGlobalOptions() *GlobalOptions {
	if x != nil {
		return x.GlobalOptions
	}
	return nil
}

// A single 'page' of the result set
type FindCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*GitCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *FindCommitsResponse) Reset() {
	*x = FindCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCommitsResponse) ProtoMessage() {}

func (x *FindCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCommitsResponse.ProtoReflect.Descriptor instead.
func (*FindCommitsResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{26}
}

func (x *FindCommitsResponse) GetCommits() []*GitCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type CommitLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *CommitLanguagesRequest) Reset() {
	*x = CommitLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitLanguagesRequest) ProtoMessage() {}

func (x *CommitLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitLanguagesRequest.ProtoReflect.Descriptor instead.
func (*CommitLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{27}
}

func (x *CommitLanguagesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CommitLanguagesRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

type CommitLanguagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Languages []*CommitLanguagesResponse_Language `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *CommitLanguagesResponse) Reset() {
	*x = CommitLanguagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitLanguagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitLanguagesResponse) ProtoMessage() {}

func (x *CommitLanguagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitLanguagesResponse.ProtoReflect.Descriptor instead.
func (*CommitLanguagesResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{28}
}

func (x *CommitLanguagesResponse) GetLanguages() []*CommitLanguagesResponse_Language {
	if x != nil {
		return x.Languages
	}
	return nil
}

type RawBlameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Path       []byte      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RawBlameRequest) Reset() {
	*x = RawBlameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBlameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBlameRequest) ProtoMessage() {}

func (x *RawBlameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBlameRequest.ProtoReflect.Descriptor instead.
func (*RawBlameRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{29}
}

func (x *RawBlameRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *RawBlameRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *RawBlameRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type RawBlameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RawBlameResponse) Reset() {
	*x = RawBlameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBlameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBlameResponse) ProtoMessage() {}

func (x *RawBlameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBlameResponse.ProtoReflect.Descriptor instead.
func (*RawBlameResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{30}
}

func (x *RawBlameResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type LastCommitForPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository      *Repository    `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision        []byte         `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Path            []byte         `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	LiteralPathspec bool           `protobuf:"varint,4,opt,name=literal_pathspec,json=literalPathspec,proto3" json:"literal_pathspec,omitempty"` // Deprecate after Rails stops using this
	GlobalOptions   *GlobalOptions `protobuf:"bytes,5,opt,name=global_options,json=globalOptions,proto3" json:"global_options,omitempty"`
}

func (x *LastCommitForPathRequest) Reset() {
	*x = LastCommitForPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastCommitForPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCommitForPathRequest) ProtoMessage() {}

func (x *LastCommitForPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCommitForPathRequest.ProtoReflect.Descriptor instead.
func (*LastCommitForPathRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{31}
}

func (x *LastCommitForPathRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *LastCommitForPathRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *LastCommitForPathRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *LastCommitForPathRequest) GetLiteralPathspec() bool {
	if x != nil {
		return x.LiteralPathspec
	}
	return false
}

func (x *LastCommitForPathRequest) GetGlobalOptions() *GlobalOptions {
	if x != nil {
		return x.GlobalOptions
	}
	return nil
}

type LastCommitForPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commit is nil when the commit was not found
	Commit *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *LastCommitForPathResponse) Reset() {
	*x = LastCommitForPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastCommitForPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCommitForPathResponse) ProtoMessage() {}

func (x *LastCommitForPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCommitForPathResponse.ProtoReflect.Descriptor instead.
func (*LastCommitForPathResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{32}
}

func (x *LastCommitForPathResponse) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type ListLastCommitsForTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision   string      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Path       []byte      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Limit      int32       `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32       `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// Deprecated: Do not use.
	LiteralPathspec bool           `protobuf:"varint,6,opt,name=literal_pathspec,json=literalPathspec,proto3" json:"literal_pathspec,omitempty"`
	GlobalOptions   *GlobalOptions `protobuf:"bytes,7,opt,name=global_options,json=globalOptions,proto3" json:"global_options,omitempty"`
}

func (x *ListLastCommitsForTreeRequest) Reset() {
	*x = ListLastCommitsForTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLastCommitsForTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLastCommitsForTreeRequest) ProtoMessage() {}

func (x *ListLastCommitsForTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLastCommitsForTreeRequest.ProtoReflect.Descriptor instead.
func (*ListLastCommitsForTreeRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{33}
}

func (x *ListLastCommitsForTreeRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *ListLastCommitsForTreeRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ListLastCommitsForTreeRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ListLastCommitsForTreeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListLastCommitsForTreeRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Deprecated: Do not use.
func (x *ListLastCommitsForTreeRequest) GetLiteralPathspec() bool {
	if x != nil {
		return x.LiteralPathspec
	}
	return false
}

func (x *ListLastCommitsForTreeRequest) GetGlobalOptions() *GlobalOptions {
	if x != nil {
		return x.GlobalOptions
	}
	return nil
}

type ListLastCommitsForTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*ListLastCommitsForTreeResponse_CommitForTree `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *ListLastCommitsForTreeResponse) Reset() {
	*x = ListLastCommitsForTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLastCommitsForTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLastCommitsForTreeResponse) ProtoMessage() {}

func (x *ListLastCommitsForTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLastCommitsForTreeResponse.ProtoReflect.Descriptor instead.
func (*ListLastCommitsForTreeResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{34}
}

func (x *ListLastCommitsForTreeResponse) GetCommits() []*ListLastCommitsForTreeResponse_CommitForTree {
	if x != nil {
		return x.Commits
	}
	return nil
}

type CommitsByMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository    *Repository    `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision      []byte         `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Offset        int32          `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32          `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Path          []byte         `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Query         string         `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	GlobalOptions *GlobalOptions `protobuf:"bytes,7,opt,name=global_options,json=globalOptions,proto3" json:"global_options,omitempty"`
}

func (x *CommitsByMessageRequest) Reset() {
	*x = CommitsByMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitsByMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitsByMessageRequest) ProtoMessage() {}

func (x *CommitsByMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitsByMessageRequest.ProtoReflect.Descriptor instead.
func (*CommitsByMessageRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{35}
}

func (x *CommitsByMessageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CommitsByMessageRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *CommitsByMessageRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CommitsByMessageRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CommitsByMessageRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CommitsByMessageRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *CommitsByMessageRequest) GetGlobalOptions() *GlobalOptions {
	if x != nil {
		return x.GlobalOptions
	}
	return nil
}

// One 'page' of the paginated response of CommitsByMessage
type CommitsByMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*GitCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *CommitsByMessageResponse) Reset() {
	*x = CommitsByMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitsByMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitsByMessageResponse) ProtoMessage() {}

func (x *CommitsByMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitsByMessageResponse.ProtoReflect.Descriptor instead.
func (*CommitsByMessageResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{36}
}

func (x *CommitsByMessageResponse) GetCommits() []*GitCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type FilterShasWithSignaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Shas       [][]byte    `protobuf:"bytes,2,rep,name=shas,proto3" json:"shas,omitempty"`
}

func (x *FilterShasWithSignaturesRequest) Reset() {
	*x = FilterShasWithSignaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterShasWithSignaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterShasWithSignaturesRequest) ProtoMessage() {}

func (x *FilterShasWithSignaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterShasWithSignaturesRequest.ProtoReflect.Descriptor instead.
func (*FilterShasWithSignaturesRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{37}
}

func (x *FilterShasWithSignaturesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FilterShasWithSignaturesRequest) GetShas() [][]byte {
	if x != nil {
		return x.Shas
	}
	return nil
}

type FilterShasWithSignaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shas [][]byte `protobuf:"bytes,1,rep,name=shas,proto3" json:"shas,omitempty"`
}

func (x *FilterShasWithSignaturesResponse) Reset() {
	*x = FilterShasWithSignaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterShasWithSignaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterShasWithSignaturesResponse) ProtoMessage() {}

func (x *FilterShasWithSignaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterShasWithSignaturesResponse.ProtoReflect.Descriptor instead.
func (*FilterShasWithSignaturesResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{38}
}

func (x *FilterShasWithSignaturesResponse) GetShas() [][]byte {
	if x != nil {
		return x.Shas
	}
	return nil
}

type ExtractCommitSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitId   string      `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
}

func (x *ExtractCommitSignatureRequest) Reset() {
	*x = ExtractCommitSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractCommitSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractCommitSignatureRequest) ProtoMessage() {}

func (x *ExtractCommitSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractCommitSignatureRequest.ProtoReflect.Descriptor instead.
func (*ExtractCommitSignatureRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{39}
}

func (x *ExtractCommitSignatureRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *ExtractCommitSignatureRequest) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

// Either of the 'signature' and 'signed_text' fields may be present. It
// is up to the caller to stitch them together.
type ExtractCommitSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature  []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	SignedText []byte `protobuf:"bytes,2,opt,name=signed_text,json=signedText,proto3" json:"signed_text,omitempty"`
}

func (x *ExtractCommitSignatureResponse) Reset() {
	*x = ExtractCommitSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractCommitSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractCommitSignatureResponse) ProtoMessage() {}

func (x *ExtractCommitSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractCommitSignatureResponse.ProtoReflect.Descriptor instead.
func (*ExtractCommitSignatureResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{40}
}

func (x *ExtractCommitSignatureResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ExtractCommitSignatureResponse) GetSignedText() []byte {
	if x != nil {
		return x.SignedText
	}
	return nil
}

type GetCommitSignaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitIds  []string    `protobuf:"bytes,2,rep,name=commit_ids,json=commitIds,proto3" json:"commit_ids,omitempty"`
}

func (x *GetCommitSignaturesRequest) Reset() {
	*x = GetCommitSignaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitSignaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitSignaturesRequest) ProtoMessage() {}

func (x *GetCommitSignaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitSignaturesRequest.ProtoReflect.Descriptor instead.
func (*GetCommitSignaturesRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{41}
}

func (x *GetCommitSignaturesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *GetCommitSignaturesRequest) GetCommitIds() []string {
	if x != nil {
		return x.CommitIds
	}
	return nil
}

type GetCommitSignaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only present for a new commit signature data.
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// See ExtractCommitSignatureResponse above for how these fields should be handled.
	Signature  []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SignedText []byte `protobuf:"bytes,3,opt,name=signed_text,json=signedText,proto3" json:"signed_text,omitempty"`
}

func (x *GetCommitSignaturesResponse) Reset() {
	*x = GetCommitSignaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitSignaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitSignaturesResponse) ProtoMessage() {}

func (x *GetCommitSignaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitSignaturesResponse.ProtoReflect.Descriptor instead.
func (*GetCommitSignaturesResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{42}
}

func (x *GetCommitSignaturesResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetCommitSignaturesResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetCommitSignaturesResponse) GetSignedText() []byte {
	if x != nil {
		return x.SignedText
	}
	return nil
}

type GetCommitMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitIds  []string    `protobuf:"bytes,2,rep,name=commit_ids,json=commitIds,proto3" json:"commit_ids,omitempty"`
}

func (x *GetCommitMessagesRequest) Reset() {
	*x = GetCommitMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitMessagesRequest) ProtoMessage() {}

func (x *GetCommitMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetCommitMessagesRequest) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{43}
}

func (x *GetCommitMessagesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *GetCommitMessagesRequest) GetCommitIds() []string {
	if x != nil {
		return x.CommitIds
	}
	return nil
}

type GetCommitMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only present for a new commit message
	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	Message  []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCommitMessagesResponse) Reset() {
	*x = GetCommitMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitMessagesResponse) ProtoMessage() {}

func (x *GetCommitMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetCommitMessagesResponse) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{44}
}

func (x *GetCommitMessagesResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetCommitMessagesResponse) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListCommitsByRefNameResponse_CommitForRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit  *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	RefName []byte     `protobuf:"bytes,2,opt,name=ref_name,json=refName,proto3" json:"ref_name,omitempty"`
}

func (x *ListCommitsByRefNameResponse_CommitForRef) Reset() {
	*x = ListCommitsByRefNameResponse_CommitForRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsByRefNameResponse_CommitForRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsByRefNameResponse_CommitForRef) ProtoMessage() {}

func (x *ListCommitsByRefNameResponse_CommitForRef) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsByRefNameResponse_CommitForRef.ProtoReflect.Descriptor instead.
func (*ListCommitsByRefNameResponse_CommitForRef) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ListCommitsByRefNameResponse_CommitForRef) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *ListCommitsByRefNameResponse_CommitForRef) GetRefName() []byte {
	if x != nil {
		return x.RefName
	}
	return nil
}

type CommitLanguagesResponse_Language struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Share     float32 `protobuf:"fixed32,2,opt,name=share,proto3" json:"share,omitempty"`
	Color     string  `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	FileCount uint32  `protobuf:"varint,4,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	Bytes     uint64  `protobuf:"varint,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *CommitLanguagesResponse_Language) Reset() {
	*x = CommitLanguagesResponse_Language{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitLanguagesResponse_Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitLanguagesResponse_Language) ProtoMessage() {}

func (x *CommitLanguagesResponse_Language) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitLanguagesResponse_Language.ProtoReflect.Descriptor instead.
func (*CommitLanguagesResponse_Language) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CommitLanguagesResponse_Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommitLanguagesResponse_Language) GetShare() float32 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *CommitLanguagesResponse_Language) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *CommitLanguagesResponse_Language) GetFileCount() uint32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

func (x *CommitLanguagesResponse_Language) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type ListLastCommitsForTreeResponse_CommitForTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit    *GitCommit `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	PathBytes []byte     `protobuf:"bytes,4,opt,name=path_bytes,json=pathBytes,proto3" json:"path_bytes,omitempty"`
}

func (x *ListLastCommitsForTreeResponse_CommitForTree) Reset() {
	*x = ListLastCommitsForTreeResponse_CommitForTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commit_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLastCommitsForTreeResponse_CommitForTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLastCommitsForTreeResponse_CommitForTree) ProtoMessage() {}

func (x *ListLastCommitsForTreeResponse_CommitForTree) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLastCommitsForTreeResponse_CommitForTree.ProtoReflect.Descriptor instead.
func (*ListLastCommitsForTreeResponse_CommitForTree) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{34, 0}
}

func (x *ListLastCommitsForTreeResponse_CommitForTree) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *ListLastCommitsForTreeResponse_CommitForTree) GetPathBytes() []byte {
	if x != nil {
		return x.PathBytes
	}
	return nil
}

var File_commit_proto protoreflect.FileDescriptor

var file_commit_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x1a, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x6a, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x73, 0x41,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x73,
	0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x65, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x11,
	0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x0a, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x47, 0x10, 0x03,
	0x22, 0x75, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xf5,
	0x02, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04,
	0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69,
	0x76, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98,
	0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06,
	0x10, 0x07, 0x22, 0x5f, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x65, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x2b, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52,
	0x45, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03,
	0x22, 0x9f, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x69,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x12, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98,
	0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x47, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x42, 0x79, 0x4f, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0xce, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x42, 0x79, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x66, 0x73, 0x1a, 0x54, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x25, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x4f, 0x50, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x22, 0x45, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xd0, 0x04, 0x0a, 0x12,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x77, 0x61, 0x6c, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x1b, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x4f, 0x50, 0x4f, 0x10, 0x01, 0x22, 0x42,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x22, 0x6e, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x7f, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x0f, 0x52, 0x61, 0x77, 0x42, 0x6c,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xed, 0x01, 0x0a,
	0x18, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3c,
	0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x19,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04,
	0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2d,
	0x0a, 0x10, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3c, 0x0a,
	0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x65,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x42, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x3c, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x47, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x1f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x04, 0x73, 0x68, 0x61, 0x73, 0x22, 0x36, 0x0a, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x68, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x68, 0x61, 0x73, 0x22,
	0x76, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x1e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x75, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04,
	0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x79, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x73, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04,
	0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x52, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0xb9, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x73, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x73, 0x41, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x73, 0x41, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97,
	0x28, 0x02, 0x08, 0x02, 0x12, 0x4a, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x18, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01,
	0x12, 0x59, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74,
	0x78, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x12, 0x6c,
	0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x65,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x12, 0x59, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa,
	0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08,
	0x02, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x19, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64,
	0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02,
	0x12, 0x4e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1a, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02,
	0x12, 0x59, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x5a, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1e, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x12, 0x47, 0x0a, 0x08, 0x52, 0x61, 0x77,
	0x42, 0x6c, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52,
	0x61, 0x77, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02,
	0x30, 0x01, 0x12, 0x60, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97,
	0x28, 0x02, 0x08, 0x02, 0x12, 0x71, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x12, 0x25,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa,
	0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64,
	0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x64,
	0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x42, 0x79, 0x4f, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x42, 0x79, 0x4f, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97,
	0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74,
	0x78, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64,
	0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x20, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x42,
	0x23, 0x5a, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x71, 0x66, 0x6e, 0x2f, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commit_proto_rawDescOnce sync.Once
	file_commit_proto_rawDescData = file_commit_proto_rawDesc
)

func file_commit_proto_rawDescGZIP() []byte {
	file_commit_proto_rawDescOnce.Do(func() {
		file_commit_proto_rawDescData = protoimpl.X.CompressGZIP(file_commit_proto_rawDescData)
	})
	return file_commit_proto_rawDescData
}

var file_commit_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_commit_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_commit_proto_goTypes = []interface{}{
	(TreeEntryResponse_ObjectType)(0),                    // 0: degitx.TreeEntryResponse.ObjectType
	(TreeEntry_EntryType)(0),                             // 1: degitx.TreeEntry.EntryType
	(FindAllCommitsRequest_Order)(0),                     // 2: degitx.FindAllCommitsRequest.Order
	(FindCommitsRequest_Order)(0),                        // 3: degitx.FindCommitsRequest.Order
	(*CommitStatsRequest)(nil),                           // 4: degitx.CommitStatsRequest
	(*CommitStatsResponse)(nil),                          // 5: degitx.CommitStatsResponse
	(*CommitIsAncestorRequest)(nil),                      // 6: degitx.CommitIsAncestorRequest
	(*CommitIsAncestorResponse)(nil),                     // 7: degitx.CommitIsAncestorResponse
	(*TreeEntryRequest)(nil),                             // 8: degitx.TreeEntryRequest
	(*TreeEntryResponse)(nil),                            // 9: degitx.TreeEntryResponse
	(*CommitsBetweenRequest)(nil),                        // 10: degitx.CommitsBetweenRequest
	(*CommitsBetweenResponse)(nil),                       // 11: degitx.CommitsBetweenResponse
	(*CountCommitsRequest)(nil),                          // 12: degitx.CountCommitsRequest
	(*CountCommitsResponse)(nil),                         // 13: degitx.CountCommitsResponse
	(*CountDivergingCommitsRequest)(nil),                 // 14: degitx.CountDivergingCommitsRequest
	(*CountDivergingCommitsResponse)(nil),                // 15: degitx.CountDivergingCommitsResponse
	(*TreeEntry)(nil),                                    // 16: degitx.TreeEntry
	(*GetTreeEntriesRequest)(nil),                        // 17: degitx.GetTreeEntriesRequest
	(*GetTreeEntriesResponse)(nil),                       // 18: degitx.GetTreeEntriesResponse
	(*ListFilesRequest)(nil),                             // 19: degitx.ListFilesRequest
	(*ListFilesResponse)(nil),                            // 20: degitx.ListFilesResponse
	(*FindCommitRequest)(nil),                            // 21: degitx.FindCommitRequest
	(*FindCommitResponse)(nil),                           // 22: degitx.FindCommitResponse
	(*ListCommitsByOidRequest)(nil),                      // 23: degitx.ListCommitsByOidRequest
	(*ListCommitsByOidResponse)(nil),                     // 24: degitx.ListCommitsByOidResponse
	(*ListCommitsByRefNameRequest)(nil),                  // 25: degitx.ListCommitsByRefNameRequest
	(*ListCommitsByRefNameResponse)(nil),                 // 26: degitx.ListCommitsByRefNameResponse
	(*FindAllCommitsRequest)(nil),                        // 27: degitx.FindAllCommitsRequest
	(*FindAllCommitsResponse)(nil),                       // 28: degitx.FindAllCommitsResponse
	(*FindCommitsRequest)(nil),                           // 29: degitx.FindCommitsRequest
	(*FindCommitsResponse)(nil),                          // 30: degitx.FindCommitsResponse
	(*CommitLanguagesRequest)(nil),                       // 31: degitx.CommitLanguagesRequest
	(*CommitLanguagesResponse)(nil),                      // 32: degitx.CommitLanguagesResponse
	(*RawBlameRequest)(nil),                              // 33: degitx.RawBlameRequest
	(*RawBlameResponse)(nil),                             // 34: degitx.RawBlameResponse
	(*LastCommitForPathRequest)(nil),                     // 35: degitx.LastCommitForPathRequest
	(*LastCommitForPathResponse)(nil),                    // 36: degitx.LastCommitForPathResponse
	(*ListLastCommitsForTreeRequest)(nil),                // 37: degitx.ListLastCommitsForTreeRequest
	(*ListLastCommitsForTreeResponse)(nil),               // 38: degitx.ListLastCommitsForTreeResponse
	(*CommitsByMessageRequest)(nil),                      // 39: degitx.CommitsByMessageRequest
	(*CommitsByMessageResponse)(nil),                     // 40: degitx.CommitsByMessageResponse
	(*FilterShasWithSignaturesRequest)(nil),              // 41: degitx.FilterShasWithSignaturesRequest
	(*FilterShasWithSignaturesResponse)(nil),             // 42: degitx.FilterShasWithSignaturesResponse
	(*ExtractCommitSignatureRequest)(nil),                // 43: degitx.ExtractCommitSignatureRequest
	(*ExtractCommitSignatureResponse)(nil),               // 44: degitx.ExtractCommitSignatureResponse
	(*GetCommitSignaturesRequest)(nil),                   // 45: degitx.GetCommitSignaturesRequest
	(*GetCommitSignaturesResponse)(nil),                  // 46: degitx.GetCommitSignaturesResponse
	(*GetCommitMessagesRequest)(nil),                     // 47: degitx.GetCommitMessagesRequest
	(*GetCommitMessagesResponse)(nil),                    // 48: degitx.GetCommitMessagesResponse
	(*ListCommitsByRefNameResponse_CommitForRef)(nil),    // 49: degitx.ListCommitsByRefNameResponse.CommitForRef
	(*CommitLanguagesResponse_Language)(nil),             // 50: degitx.CommitLanguagesResponse.Language
	(*ListLastCommitsForTreeResponse_CommitForTree)(nil), // 51: degitx.ListLastCommitsForTreeResponse.CommitForTree
	(*Repository)(nil),                                   // 52: degitx.Repository
	(*GitCommit)(nil),                                    // 53: degitx.GitCommit
	(*timestamp.Timestamp)(nil),                          // 54: google.protobuf.Timestamp
	(*GlobalOptions)(nil),                                // 55: degitx.GlobalOptions
}
var file_commit_proto_depIdxs = []int32{
	52, // 0: degitx.CommitStatsRequest.repository:type_name -> degitx.Repository
	52, // 1: degitx.CommitIsAncestorRequest.repository:type_name -> degitx.Repository
	52, // 2: degitx.TreeEntryRequest.repository:type_name -> degitx.Repository
	0,  // 3: degitx.TreeEntryResponse.type:type_name -> degitx.TreeEntryResponse.ObjectType
	52, // 4: degitx.CommitsBetweenRequest.repository:type_name -> degitx.Repository
	53, // 5: degitx.CommitsBetweenResponse.commits:type_name -> degitx.GitCommit
	52, // 6: degitx.CountCommitsRequest.repository:type_name -> degitx.Repository
	54, // 7: degitx.CountCommitsRequest.after:type_name -> google.protobuf.Timestamp
	54, // 8: degitx.CountCommitsRequest.before:type_name -> google.protobuf.Timestamp
	55, // 9: degitx.CountCommitsRequest.global_options:type_name -> degitx.GlobalOptions
	52, // 10: degitx.CountDivergingCommitsRequest.repository:type_name -> degitx.Repository
	1,  // 11: degitx.TreeEntry.type:type_name -> degitx.TreeEntry.EntryType
	52, // 12: degitx.GetTreeEntriesRequest.repository:type_name -> degitx.Repository
	16, // 13: degitx.GetTreeEntriesResponse.entries:type_name -> degitx.TreeEntry
	52, // 14: degitx.ListFilesRequest.repository:type_name -> degitx.Repository
	52, // 15: degitx.FindCommitRequest.repository:type_name -> degitx.Repository
	53, // 16: degitx.FindCommitResponse.commit:type_name -> degitx.GitCommit
	52, // 17: degitx.ListCommitsByOidRequest.repository:type_name -> degitx.Repository
	53, // 18: degitx.ListCommitsByOidResponse.commits:type_name -> degitx.GitCommit
	52, // 19: degitx.ListCommitsByRefNameRequest.repository:type_name -> degitx.Repository
	49, // 20: degitx.ListCommitsByRefNameResponse.commit_refs:type_name -> degitx.ListCommitsByRefNameResponse.CommitForRef
	52, // 21: degitx.FindAllCommitsRequest.repository:type_name -> degitx.Repository
	2,  // 22: degitx.FindAllCommitsRequest.order:type_name -> degitx.FindAllCommitsRequest.Order
	53, // 23: degitx.FindAllCommitsResponse.commits:type_name -> degitx.GitCommit
	52, // 24: degitx.FindCommitsRequest.repository:type_name -> degitx.Repository
	54, // 25: degitx.FindCommitsRequest.after:type_name -> google.protobuf.Timestamp
	54, // 26: degitx.FindCommitsRequest.before:type_name -> google.protobuf.Timestamp
	3,  // 27: degitx.FindCommitsRequest.order:type_name -> degitx.FindCommitsRequest.Order
	55, // 28: degitx.FindCommitsRequest.global_options:type_name -> degitx.GlobalOptions
	53, // 29: degitx.FindCommitsResponse.commits:type_name -> degitx.GitCommit
	52, // 30: degitx.CommitLanguagesRequest.repository:type_name -> degitx.Repository
	50, // 31: degitx.CommitLanguagesResponse.languages:type_name -> degitx.CommitLanguagesResponse.Language
	52, // 32: degitx.RawBlameRequest.repository:type_name -> degitx.Repository
	52, // 33: degitx.LastCommitForPathRequest.repository:type_name -> degitx.Repository
	55, // 34: degitx.LastCommitForPathRequest.global_options:type_name -> degitx.GlobalOptions
	53, // 35: degitx.LastCommitForPathResponse.commit:type_name -> degitx.GitCommit
	52, // 36: degitx.ListLastCommitsForTreeRequest.repository:type_name -> degitx.Repository
	55, // 37: degitx.ListLastCommitsForTreeRequest.global_options:type_name -> degitx.GlobalOptions
	51, // 38: degitx.ListLastCommitsForTreeResponse.commits:type_name -> degitx.ListLastCommitsForTreeResponse.CommitForTree
	52, // 39: degitx.CommitsByMessageRequest.repository:type_name -> degitx.Repository
	55, // 40: degitx.CommitsByMessageRequest.global_options:type_name -> degitx.GlobalOptions
	53, // 41: degitx.CommitsByMessageResponse.commits:type_name -> degitx.GitCommit
	52, // 42: degitx.FilterShasWithSignaturesRequest.repository:type_name -> degitx.Repository
	52, // 43: degitx.ExtractCommitSignatureRequest.repository:type_name -> degitx.Repository
	52, // 44: degitx.GetCommitSignaturesRequest.repository:type_name -> degitx.Repository
	52, // 45: degitx.GetCommitMessagesRequest.repository:type_name -> degitx.Repository
	53, // 46: degitx.ListCommitsByRefNameResponse.CommitForRef.commit:type_name -> degitx.GitCommit
	53, // 47: degitx.ListLastCommitsForTreeResponse.CommitForTree.commit:type_name -> degitx.GitCommit
	6,  // 48: degitx.CommitService.CommitIsAncestor:input_type -> degitx.CommitIsAncestorRequest
	8,  // 49: degitx.CommitService.TreeEntry:input_type -> degitx.TreeEntryRequest
	10, // 50: degitx.CommitService.CommitsBetween:input_type -> degitx.CommitsBetweenRequest
	12, // 51: degitx.CommitService.CountCommits:input_type -> degitx.CountCommitsRequest
	14, // 52: degitx.CommitService.CountDivergingCommits:input_type -> degitx.CountDivergingCommitsRequest
	17, // 53: degitx.CommitService.GetTreeEntries:input_type -> degitx.GetTreeEntriesRequest
	19, // 54: degitx.CommitService.ListFiles:input_type -> degitx.ListFilesRequest
	21, // 55: degitx.CommitService.FindCommit:input_type -> degitx.FindCommitRequest
	4,  // 56: degitx.CommitService.CommitStats:input_type -> degitx.CommitStatsRequest
	27, // 57: degitx.CommitService.FindAllCommits:input_type -> degitx.FindAllCommitsRequest
	29, // 58: degitx.CommitService.FindCommits:input_type -> degitx.FindCommitsRequest
	31, // 59: degitx.CommitService.CommitLanguages:input_type -> degitx.CommitLanguagesRequest
	33, // 60: degitx.CommitService.RawBlame:input_type -> degitx.RawBlameRequest
	35, // 61: degitx.CommitService.LastCommitForPath:input_type -> degitx.LastCommitForPathRequest
	37, // 62: degitx.CommitService.ListLastCommitsForTree:input_type -> degitx.ListLastCommitsForTreeRequest
	39, // 63: degitx.CommitService.CommitsByMessage:input_type -> degitx.CommitsByMessageRequest
	23, // 64: degitx.CommitService.ListCommitsByOid:input_type -> degitx.ListCommitsByOidRequest
	25, // 65: degitx.CommitService.ListCommitsByRefName:input_type -> degitx.ListCommitsByRefNameRequest
	41, // 66: degitx.CommitService.FilterShasWithSignatures:input_type -> degitx.FilterShasWithSignaturesRequest
	45, // 67: degitx.CommitService.GetCommitSignatures:input_type -> degitx.GetCommitSignaturesRequest
	47, // 68: degitx.CommitService.GetCommitMessages:input_type -> degitx.GetCommitMessagesRequest
	7,  // 69: degitx.CommitService.CommitIsAncestor:output_type -> degitx.CommitIsAncestorResponse
	9,  // 70: degitx.CommitService.TreeEntry:output_type -> degitx.TreeEntryResponse
	11, // 71: degitx.CommitService.CommitsBetween:output_type -> degitx.CommitsBetweenResponse
	13, // 72: degitx.CommitService.CountCommits:output_type -> degitx.CountCommitsResponse
	15, // 73: degitx.CommitService.CountDivergingCommits:output_type -> degitx.CountDivergingCommitsResponse
	18, // 74: degitx.CommitService.GetTreeEntries:output_type -> degitx.GetTreeEntriesResponse
	20, // 75: degitx.CommitService.ListFiles:output_type -> degitx.ListFilesResponse
	22, // 76: degitx.CommitService.FindCommit:output_type -> degitx.FindCommitResponse
	5,  // 77: degitx.CommitService.CommitStats:output_type -> degitx.CommitStatsResponse
	28, // 78: degitx.CommitService.FindAllCommits:output_type -> degitx.FindAllCommitsResponse
	30, // 79: degitx.CommitService.FindCommits:output_type -> degitx.FindCommitsResponse
	32, // 80: degitx.CommitService.CommitLanguages:output_type -> degitx.CommitLanguagesResponse
	34, // 81: degitx.CommitService.RawBlame:output_type -> degitx.RawBlameResponse
	36, // 82: degitx.CommitService.LastCommitForPath:output_type -> degitx.LastCommitForPathResponse
	38, // 83: degitx.CommitService.ListLastCommitsForTree:output_type -> degitx.ListLastCommitsForTreeResponse
	40, // 84: degitx.CommitService.CommitsByMessage:output_type -> degitx.CommitsByMessageResponse
	24, // 85: degitx.CommitService.ListCommitsByOid:output_type -> degitx.ListCommitsByOidResponse
	26, // 86: degitx.CommitService.ListCommitsByRefName:output_type -> degitx.ListCommitsByRefNameResponse
	42, // 87: degitx.CommitService.FilterShasWithSignatures:output_type -> degitx.FilterShasWithSignaturesResponse
	46, // 88: degitx.CommitService.GetCommitSignatures:output_type -> degitx.GetCommitSignaturesResponse
	48, // 89: degitx.CommitService.GetCommitMessages:output_type -> degitx.GetCommitMessagesResponse
	69, // [69:90] is the sub-list for method output_type
	48, // [48:69] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_commit_proto_init() }
func file_commit_proto_init() {
	if File_commit_proto != nil {
		return
	}
	file_lint_proto_init()
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_commit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitIsAncestorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitIsAncestorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitsBetweenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitsBetweenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDivergingCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDivergingCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsByOidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsByOidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsByRefNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsByRefNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitLanguagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBlameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBlameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastCommitForPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastCommitForPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLastCommitsForTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLastCommitsForTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitsByMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitsByMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterShasWithSignaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterShasWithSignaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractCommitSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractCommitSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitSignaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitSignaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsByRefNameResponse_CommitForRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitLanguagesResponse_Language); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commit_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLastCommitsForTreeResponse_CommitForTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commit_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commit_proto_goTypes,
		DependencyIndexes: file_commit_proto_depIdxs,
		EnumInfos:         file_commit_proto_enumTypes,
		MessageInfos:      file_commit_proto_msgTypes,
	}.Build()
	File_commit_proto = out.File
	file_commit_proto_rawDesc = nil
	file_commit_proto_goTypes = nil
	file_commit_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommitServiceClient is the client API for CommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitServiceClient interface {
	CommitIsAncestor(ctx context.Context, in *CommitIsAncestorRequest, opts ...grpc.CallOption) (*CommitIsAncestorResponse, error)
	TreeEntry(ctx context.Context, in *TreeEntryRequest, opts ...grpc.CallOption) (CommitService_TreeEntryClient, error)
	CommitsBetween(ctx context.Context, in *CommitsBetweenRequest, opts ...grpc.CallOption) (CommitService_CommitsBetweenClient, error)
	CountCommits(ctx context.Context, in *CountCommitsRequest, opts ...grpc.CallOption) (*CountCommitsResponse, error)
	CountDivergingCommits(ctx context.Context, in *CountDivergingCommitsRequest, opts ...grpc.CallOption) (*CountDivergingCommitsResponse, error)
	GetTreeEntries(ctx context.Context, in *GetTreeEntriesRequest, opts ...grpc.CallOption) (CommitService_GetTreeEntriesClient, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (CommitService_ListFilesClient, error)
	FindCommit(ctx context.Context, in *FindCommitRequest, opts ...grpc.CallOption) (*FindCommitResponse, error)
	CommitStats(ctx context.Context, in *CommitStatsRequest, opts ...grpc.CallOption) (*CommitStatsResponse, error)
	// Use a stream to paginate the result set
	FindAllCommits(ctx context.Context, in *FindAllCommitsRequest, opts ...grpc.CallOption) (CommitService_FindAllCommitsClient, error)
	FindCommits(ctx context.Context, in *FindCommitsRequest, opts ...grpc.CallOption) (CommitService_FindCommitsClient, error)
	CommitLanguages(ctx context.Context, in *CommitLanguagesRequest, opts ...grpc.CallOption) (*CommitLanguagesResponse, error)
	RawBlame(ctx context.Context, in *RawBlameRequest, opts ...grpc.CallOption) (CommitService_RawBlameClient, error)
	LastCommitForPath(ctx context.Context, in *LastCommitForPathRequest, opts ...grpc.CallOption) (*LastCommitForPathResponse, error)
	ListLastCommitsForTree(ctx context.Context, in *ListLastCommitsForTreeRequest, opts ...grpc.CallOption) (CommitService_ListLastCommitsForTreeClient, error)
	CommitsByMessage(ctx context.Context, in *CommitsByMessageRequest, opts ...grpc.CallOption) (CommitService_CommitsByMessageClient, error)
	ListCommitsByOid(ctx context.Context, in *ListCommitsByOidRequest, opts ...grpc.CallOption) (CommitService_ListCommitsByOidClient, error)
	ListCommitsByRefName(ctx context.Context, in *ListCommitsByRefNameRequest, opts ...grpc.CallOption) (CommitService_ListCommitsByRefNameClient, error)
	FilterShasWithSignatures(ctx context.Context, opts ...grpc.CallOption) (CommitService_FilterShasWithSignaturesClient, error)
	GetCommitSignatures(ctx context.Context, in *GetCommitSignaturesRequest, opts ...grpc.CallOption) (CommitService_GetCommitSignaturesClient, error)
	GetCommitMessages(ctx context.Context, in *GetCommitMessagesRequest, opts ...grpc.CallOption) (CommitService_GetCommitMessagesClient, error)
}

type commitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitServiceClient(cc grpc.ClientConnInterface) CommitServiceClient {
	return &commitServiceClient{cc}
}

func (c *commitServiceClient) CommitIsAncestor(ctx context.Context, in *CommitIsAncestorRequest, opts ...grpc.CallOption) (*CommitIsAncestorResponse, error) {
	out := new(CommitIsAncestorResponse)
	err := c.cc.Invoke(ctx, "/degitx.CommitService/CommitIsAncestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) TreeEntry(ctx context.Context, in *TreeEntryRequest, opts ...grpc.CallOption) (CommitService_TreeEntryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[0], "/degitx.CommitService/TreeEntry", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceTreeEntryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_TreeEntryClient interface {
	Recv() (*TreeEntryResponse, error)
	grpc.ClientStream
}

type commitServiceTreeEntryClient struct {
	grpc.ClientStream
}

func (x *commitServiceTreeEntryClient) Recv() (*TreeEntryResponse, error) {
	m := new(TreeEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) CommitsBetween(ctx context.Context, in *CommitsBetweenRequest, opts ...grpc.CallOption) (CommitService_CommitsBetweenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[1], "/degitx.CommitService/CommitsBetween", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceCommitsBetweenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_CommitsBetweenClient interface {
	Recv() (*CommitsBetweenResponse, error)
	grpc.ClientStream
}

type commitServiceCommitsBetweenClient struct {
	grpc.ClientStream
}

func (x *commitServiceCommitsBetweenClient) Recv() (*CommitsBetweenResponse, error) {
	m := new(CommitsBetweenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) CountCommits(ctx context.Context, in *CountCommitsRequest, opts ...grpc.CallOption) (*CountCommitsResponse, error) {
	out := new(CountCommitsResponse)
	err := c.cc.Invoke(ctx, "/degitx.CommitService/CountCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) CountDivergingCommits(ctx context.Context, in *CountDivergingCommitsRequest, opts ...grpc.CallOption) (*CountDivergingCommitsResponse, error) {
	out := new(CountDivergingCommitsResponse)
	err := c.cc.Invoke(ctx, "/degitx.CommitService/CountDivergingCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) GetTreeEntries(ctx context.Context, in *GetTreeEntriesRequest, opts ...grpc.CallOption) (CommitService_GetTreeEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[2], "/degitx.CommitService/GetTreeEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceGetTreeEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_GetTreeEntriesClient interface {
	Recv() (*GetTreeEntriesResponse, error)
	grpc.ClientStream
}

type commitServiceGetTreeEntriesClient struct {
	grpc.ClientStream
}

func (x *commitServiceGetTreeEntriesClient) Recv() (*GetTreeEntriesResponse, error) {
	m := new(GetTreeEntriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (CommitService_ListFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[3], "/degitx.CommitService/ListFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceListFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_ListFilesClient interface {
	Recv() (*ListFilesResponse, error)
	grpc.ClientStream
}

type commitServiceListFilesClient struct {
	grpc.ClientStream
}

func (x *commitServiceListFilesClient) Recv() (*ListFilesResponse, error) {
	m := new(ListFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) FindCommit(ctx context.Context, in *FindCommitRequest, opts ...grpc.CallOption) (*FindCommitResponse, error) {
	out := new(FindCommitResponse)
	err := c.cc.Invoke(ctx, "/degitx.CommitService/FindCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) CommitStats(ctx context.Context, in *CommitStatsRequest, opts ...grpc.CallOption) (*CommitStatsResponse, error) {
	out := new(CommitStatsResponse)
	err := c.cc.Invoke(ctx, "/degitx.CommitService/CommitStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) FindAllCommits(ctx context.Context, in *FindAllCommitsRequest, opts ...grpc.CallOption) (CommitService_FindAllCommitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[4], "/degitx.CommitService/FindAllCommits", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceFindAllCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_FindAllCommitsClient interface {
	Recv() (*FindAllCommitsResponse, error)
	grpc.ClientStream
}

type commitServiceFindAllCommitsClient struct {
	grpc.ClientStream
}

func (x *commitServiceFindAllCommitsClient) Recv() (*FindAllCommitsResponse, error) {
	m := new(FindAllCommitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) FindCommits(ctx context.Context, in *FindCommitsRequest, opts ...grpc.CallOption) (CommitService_FindCommitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[5], "/degitx.CommitService/FindCommits", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceFindCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_FindCommitsClient interface {
	Recv() (*FindCommitsResponse, error)
	grpc.ClientStream
}

type commitServiceFindCommitsClient struct {
	grpc.ClientStream
}

func (x *commitServiceFindCommitsClient) Recv() (*FindCommitsResponse, error) {
	m := new(FindCommitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) CommitLanguages(ctx context.Context, in *CommitLanguagesRequest, opts ...grpc.CallOption) (*CommitLanguagesResponse, error) {
	out := new(CommitLanguagesResponse)
	err := c.cc.Invoke(ctx, "/degitx.CommitService/CommitLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) RawBlame(ctx context.Context, in *RawBlameRequest, opts ...grpc.CallOption) (CommitService_RawBlameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[6], "/degitx.CommitService/RawBlame", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceRawBlameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_RawBlameClient interface {
	Recv() (*RawBlameResponse, error)
	grpc.ClientStream
}

type commitServiceRawBlameClient struct {
	grpc.ClientStream
}

func (x *commitServiceRawBlameClient) Recv() (*RawBlameResponse, error) {
	m := new(RawBlameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) LastCommitForPath(ctx context.Context, in *LastCommitForPathRequest, opts ...grpc.CallOption) (*LastCommitForPathResponse, error) {
	out := new(LastCommitForPathResponse)
	err := c.cc.Invoke(ctx, "/degitx.CommitService/LastCommitForPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) ListLastCommitsForTree(ctx context.Context, in *ListLastCommitsForTreeRequest, opts ...grpc.CallOption) (CommitService_ListLastCommitsForTreeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[7], "/degitx.CommitService/ListLastCommitsForTree", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceListLastCommitsForTreeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_ListLastCommitsForTreeClient interface {
	Recv() (*ListLastCommitsForTreeResponse, error)
	grpc.ClientStream
}

type commitServiceListLastCommitsForTreeClient struct {
	grpc.ClientStream
}

func (x *commitServiceListLastCommitsForTreeClient) Recv() (*ListLastCommitsForTreeResponse, error) {
	m := new(ListLastCommitsForTreeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) CommitsByMessage(ctx context.Context, in *CommitsByMessageRequest, opts ...grpc.CallOption) (CommitService_CommitsByMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[8], "/degitx.CommitService/CommitsByMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceCommitsByMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_CommitsByMessageClient interface {
	Recv() (*CommitsByMessageResponse, error)
	grpc.ClientStream
}

type commitServiceCommitsByMessageClient struct {
	grpc.ClientStream
}

func (x *commitServiceCommitsByMessageClient) Recv() (*CommitsByMessageResponse, error) {
	m := new(CommitsByMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) ListCommitsByOid(ctx context.Context, in *ListCommitsByOidRequest, opts ...grpc.CallOption) (CommitService_ListCommitsByOidClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[9], "/degitx.CommitService/ListCommitsByOid", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceListCommitsByOidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_ListCommitsByOidClient interface {
	Recv() (*ListCommitsByOidResponse, error)
	grpc.ClientStream
}

type commitServiceListCommitsByOidClient struct {
	grpc.ClientStream
}

func (x *commitServiceListCommitsByOidClient) Recv() (*ListCommitsByOidResponse, error) {
	m := new(ListCommitsByOidResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) ListCommitsByRefName(ctx context.Context, in *ListCommitsByRefNameRequest, opts ...grpc.CallOption) (CommitService_ListCommitsByRefNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[10], "/degitx.CommitService/ListCommitsByRefName", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceListCommitsByRefNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_ListCommitsByRefNameClient interface {
	Recv() (*ListCommitsByRefNameResponse, error)
	grpc.ClientStream
}

type commitServiceListCommitsByRefNameClient struct {
	grpc.ClientStream
}

func (x *commitServiceListCommitsByRefNameClient) Recv() (*ListCommitsByRefNameResponse, error) {
	m := new(ListCommitsByRefNameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) FilterShasWithSignatures(ctx context.Context, opts ...grpc.CallOption) (CommitService_FilterShasWithSignaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[11], "/degitx.CommitService/FilterShasWithSignatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceFilterShasWithSignaturesClient{stream}
	return x, nil
}

type CommitService_FilterShasWithSignaturesClient interface {
	Send(*FilterShasWithSignaturesRequest) error
	Recv() (*FilterShasWithSignaturesResponse, error)
	grpc.ClientStream
}

type commitServiceFilterShasWithSignaturesClient struct {
	grpc.ClientStream
}

func (x *commitServiceFilterShasWithSignaturesClient) Send(m *FilterShasWithSignaturesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commitServiceFilterShasWithSignaturesClient) Recv() (*FilterShasWithSignaturesResponse, error) {
	m := new(FilterShasWithSignaturesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) GetCommitSignatures(ctx context.Context, in *GetCommitSignaturesRequest, opts ...grpc.CallOption) (CommitService_GetCommitSignaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[12], "/degitx.CommitService/GetCommitSignatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceGetCommitSignaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_GetCommitSignaturesClient interface {
	Recv() (*GetCommitSignaturesResponse, error)
	grpc.ClientStream
}

type commitServiceGetCommitSignaturesClient struct {
	grpc.ClientStream
}

func (x *commitServiceGetCommitSignaturesClient) Recv() (*GetCommitSignaturesResponse, error) {
	m := new(GetCommitSignaturesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) GetCommitMessages(ctx context.Context, in *GetCommitMessagesRequest, opts ...grpc.CallOption) (CommitService_GetCommitMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[13], "/degitx.CommitService/GetCommitMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceGetCommitMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_GetCommitMessagesClient interface {
	Recv() (*GetCommitMessagesResponse, error)
	grpc.ClientStream
}

type commitServiceGetCommitMessagesClient struct {
	grpc.ClientStream
}

func (x *commitServiceGetCommitMessagesClient) Recv() (*GetCommitMessagesResponse, error) {
	m := new(GetCommitMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommitServiceServer is the server API for CommitService service.
type CommitServiceServer interface {
	CommitIsAncestor(context.Context, *CommitIsAncestorRequest) (*CommitIsAncestorResponse, error)
	TreeEntry(*TreeEntryRequest, CommitService_TreeEntryServer) error
	CommitsBetween(*CommitsBetweenRequest, CommitService_CommitsBetweenServer) error
	CountCommits(context.Context, *CountCommitsRequest) (*CountCommitsResponse, error)
	CountDivergingCommits(context.Context, *CountDivergingCommitsRequest) (*CountDivergingCommitsResponse, error)
	GetTreeEntries(*GetTreeEntriesRequest, CommitService_GetTreeEntriesServer) error
	ListFiles(*ListFilesRequest, CommitService_ListFilesServer) error
	FindCommit(context.Context, *FindCommitRequest) (*FindCommitResponse, error)
	CommitStats(context.Context, *CommitStatsRequest) (*CommitStatsResponse, error)
	// Use a stream to paginate the result set
	FindAllCommits(*FindAllCommitsRequest, CommitService_FindAllCommitsServer) error
	FindCommits(*FindCommitsRequest, CommitService_FindCommitsServer) error
	CommitLanguages(context.Context, *CommitLanguagesRequest) (*CommitLanguagesResponse, error)
	RawBlame(*RawBlameRequest, CommitService_RawBlameServer) error
	LastCommitForPath(context.Context, *LastCommitForPathRequest) (*LastCommitForPathResponse, error)
	ListLastCommitsForTree(*ListLastCommitsForTreeRequest, CommitService_ListLastCommitsForTreeServer) error
	CommitsByMessage(*CommitsByMessageRequest, CommitService_CommitsByMessageServer) error
	ListCommitsByOid(*ListCommitsByOidRequest, CommitService_ListCommitsByOidServer) error
	ListCommitsByRefName(*ListCommitsByRefNameRequest, CommitService_ListCommitsByRefNameServer) error
	FilterShasWithSignatures(CommitService_FilterShasWithSignaturesServer) error
	GetCommitSignatures(*GetCommitSignaturesRequest, CommitService_GetCommitSignaturesServer) error
	GetCommitMessages(*GetCommitMessagesRequest, CommitService_GetCommitMessagesServer) error
}

// UnimplementedCommitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommitServiceServer struct {
}

func (*UnimplementedCommitServiceServer) CommitIsAncestor(context.Context, *CommitIsAncestorRequest) (*CommitIsAncestorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitIsAncestor not implemented")
}
func (*UnimplementedCommitServiceServer) TreeEntry(*TreeEntryRequest, CommitService_TreeEntryServer) error {
	return status.Errorf(codes.Unimplemented, "method TreeEntry not implemented")
}
func (*UnimplementedCommitServiceServer) CommitsBetween(*CommitsBetweenRequest, CommitService_CommitsBetweenServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitsBetween not implemented")
}
func (*UnimplementedCommitServiceServer) CountCommits(context.Context, *CountCommitsRequest) (*CountCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCommits not implemented")
}
func (*UnimplementedCommitServiceServer) CountDivergingCommits(context.Context, *CountDivergingCommitsRequest) (*CountDivergingCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDivergingCommits not implemented")
}
func (*UnimplementedCommitServiceServer) GetTreeEntries(*GetTreeEntriesRequest, CommitService_GetTreeEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTreeEntries not implemented")
}
func (*UnimplementedCommitServiceServer) ListFiles(*ListFilesRequest, CommitService_ListFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (*UnimplementedCommitServiceServer) FindCommit(context.Context, *FindCommitRequest) (*FindCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommit not implemented")
}
func (*UnimplementedCommitServiceServer) CommitStats(context.Context, *CommitStatsRequest) (*CommitStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitStats not implemented")
}
func (*UnimplementedCommitServiceServer) FindAllCommits(*FindAllCommitsRequest, CommitService_FindAllCommitsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllCommits not implemented")
}
func (*UnimplementedCommitServiceServer) FindCommits(*FindCommitsRequest, CommitService_FindCommitsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindCommits not implemented")
}
func (*UnimplementedCommitServiceServer) CommitLanguages(context.Context, *CommitLanguagesRequest) (*CommitLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitLanguages not implemented")
}
func (*UnimplementedCommitServiceServer) RawBlame(*RawBlameRequest, CommitService_RawBlameServer) error {
	return status.Errorf(codes.Unimplemented, "method RawBlame not implemented")
}
func (*UnimplementedCommitServiceServer) LastCommitForPath(context.Context, *LastCommitForPathRequest) (*LastCommitForPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastCommitForPath not implemented")
}
func (*UnimplementedCommitServiceServer) ListLastCommitsForTree(*ListLastCommitsForTreeRequest, CommitService_ListLastCommitsForTreeServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLastCommitsForTree not implemented")
}
func (*UnimplementedCommitServiceServer) CommitsByMessage(*CommitsByMessageRequest, CommitService_CommitsByMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitsByMessage not implemented")
}
func (*UnimplementedCommitServiceServer) ListCommitsByOid(*ListCommitsByOidRequest, CommitService_ListCommitsByOidServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCommitsByOid not implemented")
}
func (*UnimplementedCommitServiceServer) ListCommitsByRefName(*ListCommitsByRefNameRequest, CommitService_ListCommitsByRefNameServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCommitsByRefName not implemented")
}
func (*UnimplementedCommitServiceServer) FilterShasWithSignatures(CommitService_FilterShasWithSignaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterShasWithSignatures not implemented")
}
func (*UnimplementedCommitServiceServer) GetCommitSignatures(*GetCommitSignaturesRequest, CommitService_GetCommitSignaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCommitSignatures not implemented")
}
func (*UnimplementedCommitServiceServer) GetCommitMessages(*GetCommitMessagesRequest, CommitService_GetCommitMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCommitMessages not implemented")
}

func RegisterCommitServiceServer(s *grpc.Server, srv CommitServiceServer) {
	s.RegisterService(&_CommitService_serviceDesc, srv)
}

func _CommitService_CommitIsAncestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitIsAncestorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).CommitIsAncestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.CommitService/CommitIsAncestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).CommitIsAncestor(ctx, req.(*CommitIsAncestorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_TreeEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TreeEntryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).TreeEntry(m, &commitServiceTreeEntryServer{stream})
}

type CommitService_TreeEntryServer interface {
	Send(*TreeEntryResponse) error
	grpc.ServerStream
}

type commitServiceTreeEntryServer struct {
	grpc.ServerStream
}

func (x *commitServiceTreeEntryServer) Send(m *TreeEntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_CommitsBetween_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitsBetweenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).CommitsBetween(m, &commitServiceCommitsBetweenServer{stream})
}

type CommitService_CommitsBetweenServer interface {
	Send(*CommitsBetweenResponse) error
	grpc.ServerStream
}

type commitServiceCommitsBetweenServer struct {
	grpc.ServerStream
}

func (x *commitServiceCommitsBetweenServer) Send(m *CommitsBetweenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_CountCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).CountCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.CommitService/CountCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).CountCommits(ctx, req.(*CountCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_CountDivergingCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDivergingCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).CountDivergingCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.CommitService/CountDivergingCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).CountDivergingCommits(ctx, req.(*CountDivergingCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_GetTreeEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTreeEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).GetTreeEntries(m, &commitServiceGetTreeEntriesServer{stream})
}

type CommitService_GetTreeEntriesServer interface {
	Send(*GetTreeEntriesResponse) error
	grpc.ServerStream
}

type commitServiceGetTreeEntriesServer struct {
	grpc.ServerStream
}

func (x *commitServiceGetTreeEntriesServer) Send(m *GetTreeEntriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).ListFiles(m, &commitServiceListFilesServer{stream})
}

type CommitService_ListFilesServer interface {
	Send(*ListFilesResponse) error
	grpc.ServerStream
}

type commitServiceListFilesServer struct {
	grpc.ServerStream
}

func (x *commitServiceListFilesServer) Send(m *ListFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_FindCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).FindCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.CommitService/FindCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).FindCommit(ctx, req.(*FindCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_CommitStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).CommitStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.CommitService/CommitStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).CommitStats(ctx, req.(*CommitStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_FindAllCommits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllCommitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).FindAllCommits(m, &commitServiceFindAllCommitsServer{stream})
}

type CommitService_FindAllCommitsServer interface {
	Send(*FindAllCommitsResponse) error
	grpc.ServerStream
}

type commitServiceFindAllCommitsServer struct {
	grpc.ServerStream
}

func (x *commitServiceFindAllCommitsServer) Send(m *FindAllCommitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_FindCommits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindCommitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).FindCommits(m, &commitServiceFindCommitsServer{stream})
}

type CommitService_FindCommitsServer interface {
	Send(*FindCommitsResponse) error
	grpc.ServerStream
}

type commitServiceFindCommitsServer struct {
	grpc.ServerStream
}

func (x *commitServiceFindCommitsServer) Send(m *FindCommitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_CommitLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).CommitLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.CommitService/CommitLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).CommitLanguages(ctx, req.(*CommitLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_RawBlame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawBlameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).RawBlame(m, &commitServiceRawBlameServer{stream})
}

type CommitService_RawBlameServer interface {
	Send(*RawBlameResponse) error
	grpc.ServerStream
}

type commitServiceRawBlameServer struct {
	grpc.ServerStream
}

func (x *commitServiceRawBlameServer) Send(m *RawBlameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_LastCommitForPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastCommitForPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).LastCommitForPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.CommitService/LastCommitForPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).LastCommitForPath(ctx, req.(*LastCommitForPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_ListLastCommitsForTree_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListLastCommitsForTreeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).ListLastCommitsForTree(m, &commitServiceListLastCommitsForTreeServer{stream})
}

type CommitService_ListLastCommitsForTreeServer interface {
	Send(*ListLastCommitsForTreeResponse) error
	grpc.ServerStream
}

type commitServiceListLastCommitsForTreeServer struct {
	grpc.ServerStream
}

func (x *commitServiceListLastCommitsForTreeServer) Send(m *ListLastCommitsForTreeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_CommitsByMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitsByMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).CommitsByMessage(m, &commitServiceCommitsByMessageServer{stream})
}

type CommitService_CommitsByMessageServer interface {
	Send(*CommitsByMessageResponse) error
	grpc.ServerStream
}

type commitServiceCommitsByMessageServer struct {
	grpc.ServerStream
}

func (x *commitServiceCommitsByMessageServer) Send(m *CommitsByMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_ListCommitsByOid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCommitsByOidRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).ListCommitsByOid(m, &commitServiceListCommitsByOidServer{stream})
}

type CommitService_ListCommitsByOidServer interface {
	Send(*ListCommitsByOidResponse) error
	grpc.ServerStream
}

type commitServiceListCommitsByOidServer struct {
	grpc.ServerStream
}

func (x *commitServiceListCommitsByOidServer) Send(m *ListCommitsByOidResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_ListCommitsByRefName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCommitsByRefNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).ListCommitsByRefName(m, &commitServiceListCommitsByRefNameServer{stream})
}

type CommitService_ListCommitsByRefNameServer interface {
	Send(*ListCommitsByRefNameResponse) error
	grpc.ServerStream
}

type commitServiceListCommitsByRefNameServer struct {
	grpc.ServerStream
}

func (x *commitServiceListCommitsByRefNameServer) Send(m *ListCommitsByRefNameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_FilterShasWithSignatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommitServiceServer).FilterShasWithSignatures(&commitServiceFilterShasWithSignaturesServer{stream})
}

type CommitService_FilterShasWithSignaturesServer interface {
	Send(*FilterShasWithSignaturesResponse) error
	Recv() (*FilterShasWithSignaturesRequest, error)
	grpc.ServerStream
}

type commitServiceFilterShasWithSignaturesServer struct {
	grpc.ServerStream
}

func (x *commitServiceFilterShasWithSignaturesServer) Send(m *FilterShasWithSignaturesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commitServiceFilterShasWithSignaturesServer) Recv() (*FilterShasWithSignaturesRequest, error) {
	m := new(FilterShasWithSignaturesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CommitService_GetCommitSignatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommitSignaturesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).GetCommitSignatures(m, &commitServiceGetCommitSignaturesServer{stream})
}

type CommitService_GetCommitSignaturesServer interface {
	Send(*GetCommitSignaturesResponse) error
	grpc.ServerStream
}

type commitServiceGetCommitSignaturesServer struct {
	grpc.ServerStream
}

func (x *commitServiceGetCommitSignaturesServer) Send(m *GetCommitSignaturesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_GetCommitMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommitMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).GetCommitMessages(m, &commitServiceGetCommitMessagesServer{stream})
}

type CommitService_GetCommitMessagesServer interface {
	Send(*GetCommitMessagesResponse) error
	grpc.ServerStream
}

type commitServiceGetCommitMessagesServer struct {
	grpc.ServerStream
}

func (x *commitServiceGetCommitMessagesServer) Send(m *GetCommitMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CommitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "degitx.CommitService",
	HandlerType: (*CommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitIsAncestor",
			Handler:    _CommitService_CommitIsAncestor_Handler,
		},
		{
			MethodName: "CountCommits",
			Handler:    _CommitService_CountCommits_Handler,
		},
		{
			MethodName: "CountDivergingCommits",
			Handler:    _CommitService_CountDivergingCommits_Handler,
		},
		{
			MethodName: "FindCommit",
			Handler:    _CommitService_FindCommit_Handler,
		},
		{
			MethodName: "CommitStats",
			Handler:    _CommitService_CommitStats_Handler,
		},
		{
			MethodName: "CommitLanguages",
			Handler:    _CommitService_CommitLanguages_Handler,
		},
		{
			MethodName: "LastCommitForPath",
			Handler:    _CommitService_LastCommitForPath_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TreeEntry",
			Handler:       _CommitService_TreeEntry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CommitsBetween",
			Handler:       _CommitService_CommitsBetween_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTreeEntries",
			Handler:       _CommitService_GetTreeEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListFiles",
			Handler:       _CommitService_ListFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllCommits",
			Handler:       _CommitService_FindAllCommits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindCommits",
			Handler:       _CommitService_FindCommits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RawBlame",
			Handler:       _CommitService_RawBlame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListLastCommitsForTree",
			Handler:       _CommitService_ListLastCommitsForTree_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CommitsByMessage",
			Handler:       _CommitService_CommitsByMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCommitsByOid",
			Handler:       _CommitService_ListCommitsByOid_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCommitsByRefName",
			Handler:       _CommitService_ListCommitsByRefName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FilterShasWithSignatures",
			Handler:       _CommitService_FilterShasWithSignatures_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCommitSignatures",
			Handler:       _CommitService_GetCommitSignatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCommitMessages",
			Handler:       _CommitService_GetCommitMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "commit.proto",
}
