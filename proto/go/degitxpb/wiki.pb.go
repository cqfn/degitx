// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: wiki.proto

package degitxpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WikiGetAllPagesRequest_SortBy int32

const (
	WikiGetAllPagesRequest_TITLE      WikiGetAllPagesRequest_SortBy = 0
	WikiGetAllPagesRequest_CREATED_AT WikiGetAllPagesRequest_SortBy = 1
)

// Enum value maps for WikiGetAllPagesRequest_SortBy.
var (
	WikiGetAllPagesRequest_SortBy_name = map[int32]string{
		0: "TITLE",
		1: "CREATED_AT",
	}
	WikiGetAllPagesRequest_SortBy_value = map[string]int32{
		"TITLE":      0,
		"CREATED_AT": 1,
	}
)

func (x WikiGetAllPagesRequest_SortBy) Enum() *WikiGetAllPagesRequest_SortBy {
	p := new(WikiGetAllPagesRequest_SortBy)
	*p = x
	return p
}

func (x WikiGetAllPagesRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WikiGetAllPagesRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_wiki_proto_enumTypes[0].Descriptor()
}

func (WikiGetAllPagesRequest_SortBy) Type() protoreflect.EnumType {
	return &file_wiki_proto_enumTypes[0]
}

func (x WikiGetAllPagesRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WikiGetAllPagesRequest_SortBy.Descriptor instead.
func (WikiGetAllPagesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{15, 0}
}

type WikiListPagesRequest_SortBy int32

const (
	WikiListPagesRequest_TITLE      WikiListPagesRequest_SortBy = 0
	WikiListPagesRequest_CREATED_AT WikiListPagesRequest_SortBy = 1
)

// Enum value maps for WikiListPagesRequest_SortBy.
var (
	WikiListPagesRequest_SortBy_name = map[int32]string{
		0: "TITLE",
		1: "CREATED_AT",
	}
	WikiListPagesRequest_SortBy_value = map[string]int32{
		"TITLE":      0,
		"CREATED_AT": 1,
	}
)

func (x WikiListPagesRequest_SortBy) Enum() *WikiListPagesRequest_SortBy {
	p := new(WikiListPagesRequest_SortBy)
	*p = x
	return p
}

func (x WikiListPagesRequest_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WikiListPagesRequest_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_wiki_proto_enumTypes[1].Descriptor()
}

func (WikiListPagesRequest_SortBy) Type() protoreflect.EnumType {
	return &file_wiki_proto_enumTypes[1]
}

func (x WikiListPagesRequest_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WikiListPagesRequest_SortBy.Descriptor instead.
func (WikiListPagesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{17, 0}
}

type WikiCommitDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email    []byte `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Message  []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	UserId   int32  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName []byte `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *WikiCommitDetails) Reset() {
	*x = WikiCommitDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiCommitDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiCommitDetails) ProtoMessage() {}

func (x *WikiCommitDetails) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiCommitDetails.ProtoReflect.Descriptor instead.
func (*WikiCommitDetails) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{0}
}

func (x *WikiCommitDetails) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiCommitDetails) GetEmail() []byte {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *WikiCommitDetails) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WikiCommitDetails) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WikiCommitDetails) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

type WikiPageVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Format string     `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *WikiPageVersion) Reset() {
	*x = WikiPageVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiPageVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiPageVersion) ProtoMessage() {}

func (x *WikiPageVersion) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiPageVersion.ProtoReflect.Descriptor instead.
func (*WikiPageVersion) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{1}
}

func (x *WikiPageVersion) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *WikiPageVersion) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type WikiPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These fields are only present in the first message of a WikiPage stream
	Version    *WikiPageVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Format     string           `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Title      []byte           `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	UrlPath    string           `protobuf:"bytes,4,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty"`
	Path       []byte           `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Name       []byte           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Historical bool             `protobuf:"varint,7,opt,name=historical,proto3" json:"historical,omitempty"`
	// This field is present in all messages of a WikiPage stream
	RawData []byte `protobuf:"bytes,8,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *WikiPage) Reset() {
	*x = WikiPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiPage) ProtoMessage() {}

func (x *WikiPage) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiPage.ProtoReflect.Descriptor instead.
func (*WikiPage) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{2}
}

func (x *WikiPage) GetVersion() *WikiPageVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *WikiPage) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WikiPage) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *WikiPage) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *WikiPage) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *WikiPage) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiPage) GetHistorical() bool {
	if x != nil {
		return x.Historical
	}
	return false
}

func (x *WikiPage) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type WikiGetPageVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	PagePath   []byte      `protobuf:"bytes,2,opt,name=page_path,json=pagePath,proto3" json:"page_path,omitempty"`
	Page       int32       `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage    int32       `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *WikiGetPageVersionsRequest) Reset() {
	*x = WikiGetPageVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiGetPageVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiGetPageVersionsRequest) ProtoMessage() {}

func (x *WikiGetPageVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiGetPageVersionsRequest.ProtoReflect.Descriptor instead.
func (*WikiGetPageVersionsRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{3}
}

func (x *WikiGetPageVersionsRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiGetPageVersionsRequest) GetPagePath() []byte {
	if x != nil {
		return x.PagePath
	}
	return nil
}

func (x *WikiGetPageVersionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *WikiGetPageVersionsRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type WikiGetPageVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []*WikiPageVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *WikiGetPageVersionsResponse) Reset() {
	*x = WikiGetPageVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiGetPageVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiGetPageVersionsResponse) ProtoMessage() {}

func (x *WikiGetPageVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiGetPageVersionsResponse.ProtoReflect.Descriptor instead.
func (*WikiGetPageVersionsResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{4}
}

func (x *WikiGetPageVersionsResponse) GetVersions() []*WikiPageVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

// This message is sent in a stream because the 'content' field may be large.
type WikiWritePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These following fields are only present in the first message.
	Repository    *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Name          []byte             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Format        string             `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	CommitDetails *WikiCommitDetails `protobuf:"bytes,4,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
	// This field is present in all messages.
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *WikiWritePageRequest) Reset() {
	*x = WikiWritePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiWritePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiWritePageRequest) ProtoMessage() {}

func (x *WikiWritePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiWritePageRequest.ProtoReflect.Descriptor instead.
func (*WikiWritePageRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{5}
}

func (x *WikiWritePageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiWritePageRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiWritePageRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WikiWritePageRequest) GetCommitDetails() *WikiCommitDetails {
	if x != nil {
		return x.CommitDetails
	}
	return nil
}

func (x *WikiWritePageRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type WikiWritePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuplicateError []byte `protobuf:"bytes,1,opt,name=duplicate_error,json=duplicateError,proto3" json:"duplicate_error,omitempty"`
}

func (x *WikiWritePageResponse) Reset() {
	*x = WikiWritePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiWritePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiWritePageResponse) ProtoMessage() {}

func (x *WikiWritePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiWritePageResponse.ProtoReflect.Descriptor instead.
func (*WikiWritePageResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{6}
}

func (x *WikiWritePageResponse) GetDuplicateError() []byte {
	if x != nil {
		return x.DuplicateError
	}
	return nil
}

type WikiUpdatePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There fields are only present in the first message of the stream
	Repository    *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	PagePath      []byte             `protobuf:"bytes,2,opt,name=page_path,json=pagePath,proto3" json:"page_path,omitempty"`
	Title         []byte             `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Format        string             `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	CommitDetails *WikiCommitDetails `protobuf:"bytes,5,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
	// This field is present in all messages
	Content []byte `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *WikiUpdatePageRequest) Reset() {
	*x = WikiUpdatePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiUpdatePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiUpdatePageRequest) ProtoMessage() {}

func (x *WikiUpdatePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiUpdatePageRequest.ProtoReflect.Descriptor instead.
func (*WikiUpdatePageRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{7}
}

func (x *WikiUpdatePageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetPagePath() []byte {
	if x != nil {
		return x.PagePath
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WikiUpdatePageRequest) GetCommitDetails() *WikiCommitDetails {
	if x != nil {
		return x.CommitDetails
	}
	return nil
}

func (x *WikiUpdatePageRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type WikiUpdatePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error []byte `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WikiUpdatePageResponse) Reset() {
	*x = WikiUpdatePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiUpdatePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiUpdatePageResponse) ProtoMessage() {}

func (x *WikiUpdatePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiUpdatePageResponse.ProtoReflect.Descriptor instead.
func (*WikiUpdatePageResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{8}
}

func (x *WikiUpdatePageResponse) GetError() []byte {
	if x != nil {
		return x.Error
	}
	return nil
}

type WikiDeletePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository    *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	PagePath      []byte             `protobuf:"bytes,2,opt,name=page_path,json=pagePath,proto3" json:"page_path,omitempty"`
	CommitDetails *WikiCommitDetails `protobuf:"bytes,3,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
}

func (x *WikiDeletePageRequest) Reset() {
	*x = WikiDeletePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiDeletePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiDeletePageRequest) ProtoMessage() {}

func (x *WikiDeletePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiDeletePageRequest.ProtoReflect.Descriptor instead.
func (*WikiDeletePageRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{9}
}

func (x *WikiDeletePageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiDeletePageRequest) GetPagePath() []byte {
	if x != nil {
		return x.PagePath
	}
	return nil
}

func (x *WikiDeletePageRequest) GetCommitDetails() *WikiCommitDetails {
	if x != nil {
		return x.CommitDetails
	}
	return nil
}

type WikiDeletePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WikiDeletePageResponse) Reset() {
	*x = WikiDeletePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiDeletePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiDeletePageResponse) ProtoMessage() {}

func (x *WikiDeletePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiDeletePageResponse.ProtoReflect.Descriptor instead.
func (*WikiDeletePageResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{10}
}

type WikiFindPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Title      []byte      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Revision   []byte      `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Directory  []byte      `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *WikiFindPageRequest) Reset() {
	*x = WikiFindPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiFindPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiFindPageRequest) ProtoMessage() {}

func (x *WikiFindPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiFindPageRequest.ProtoReflect.Descriptor instead.
func (*WikiFindPageRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{11}
}

func (x *WikiFindPageRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiFindPageRequest) GetTitle() []byte {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *WikiFindPageRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *WikiFindPageRequest) GetDirectory() []byte {
	if x != nil {
		return x.Directory
	}
	return nil
}

// WikiFindPageResponse is a stream because we need multiple WikiPage
// messages to send the raw_data field.
type WikiFindPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *WikiFindPageResponse) Reset() {
	*x = WikiFindPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiFindPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiFindPageResponse) ProtoMessage() {}

func (x *WikiFindPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiFindPageResponse.ProtoReflect.Descriptor instead.
func (*WikiFindPageResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{12}
}

func (x *WikiFindPageResponse) GetPage() *WikiPage {
	if x != nil {
		return x.Page
	}
	return nil
}

type WikiFindFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Name       []byte      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional: revision
	Revision []byte `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *WikiFindFileRequest) Reset() {
	*x = WikiFindFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiFindFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiFindFileRequest) ProtoMessage() {}

func (x *WikiFindFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiFindFileRequest.ProtoReflect.Descriptor instead.
func (*WikiFindFileRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{13}
}

func (x *WikiFindFileRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiFindFileRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiFindFileRequest) GetRevision() []byte {
	if x != nil {
		return x.Revision
	}
	return nil
}

type WikiFindFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If 'name' is empty, the file was not found.
	Name     []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MimeType string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	RawData  []byte `protobuf:"bytes,3,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	Path     []byte `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *WikiFindFileResponse) Reset() {
	*x = WikiFindFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiFindFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiFindFileResponse) ProtoMessage() {}

func (x *WikiFindFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiFindFileResponse.ProtoReflect.Descriptor instead.
func (*WikiFindFileResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{14}
}

func (x *WikiFindFileResponse) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *WikiFindFileResponse) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *WikiFindFileResponse) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *WikiFindFileResponse) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type WikiGetAllPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Passing 0 means no limit is applied
	Limit         uint32                        `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	DirectionDesc bool                          `protobuf:"varint,3,opt,name=direction_desc,json=directionDesc,proto3" json:"direction_desc,omitempty"`
	Sort          WikiGetAllPagesRequest_SortBy `protobuf:"varint,4,opt,name=sort,proto3,enum=degitx.WikiGetAllPagesRequest_SortBy" json:"sort,omitempty"`
}

func (x *WikiGetAllPagesRequest) Reset() {
	*x = WikiGetAllPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiGetAllPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiGetAllPagesRequest) ProtoMessage() {}

func (x *WikiGetAllPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiGetAllPagesRequest.ProtoReflect.Descriptor instead.
func (*WikiGetAllPagesRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{15}
}

func (x *WikiGetAllPagesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiGetAllPagesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WikiGetAllPagesRequest) GetDirectionDesc() bool {
	if x != nil {
		return x.DirectionDesc
	}
	return false
}

func (x *WikiGetAllPagesRequest) GetSort() WikiGetAllPagesRequest_SortBy {
	if x != nil {
		return x.Sort
	}
	return WikiGetAllPagesRequest_TITLE
}

// The WikiGetAllPagesResponse stream is a concatenation of WikiPage streams
type WikiGetAllPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// When end_of_page is true it signals a change of page for the next Response message (if any)
	EndOfPage bool `protobuf:"varint,2,opt,name=end_of_page,json=endOfPage,proto3" json:"end_of_page,omitempty"`
}

func (x *WikiGetAllPagesResponse) Reset() {
	*x = WikiGetAllPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiGetAllPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiGetAllPagesResponse) ProtoMessage() {}

func (x *WikiGetAllPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiGetAllPagesResponse.ProtoReflect.Descriptor instead.
func (*WikiGetAllPagesResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{16}
}

func (x *WikiGetAllPagesResponse) GetPage() *WikiPage {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WikiGetAllPagesResponse) GetEndOfPage() bool {
	if x != nil {
		return x.EndOfPage
	}
	return false
}

type WikiListPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Passing 0 means no limit is applied
	Limit         uint32                      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	DirectionDesc bool                        `protobuf:"varint,3,opt,name=direction_desc,json=directionDesc,proto3" json:"direction_desc,omitempty"`
	Sort          WikiListPagesRequest_SortBy `protobuf:"varint,4,opt,name=sort,proto3,enum=degitx.WikiListPagesRequest_SortBy" json:"sort,omitempty"`
	Offset        uint32                      `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *WikiListPagesRequest) Reset() {
	*x = WikiListPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiListPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiListPagesRequest) ProtoMessage() {}

func (x *WikiListPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiListPagesRequest.ProtoReflect.Descriptor instead.
func (*WikiListPagesRequest) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{17}
}

func (x *WikiListPagesRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *WikiListPagesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WikiListPagesRequest) GetDirectionDesc() bool {
	if x != nil {
		return x.DirectionDesc
	}
	return false
}

func (x *WikiListPagesRequest) GetSort() WikiListPagesRequest_SortBy {
	if x != nil {
		return x.Sort
	}
	return WikiListPagesRequest_TITLE
}

func (x *WikiListPagesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// The WikiListPagesResponse stream is a concatenation of WikiPage streams without content
type WikiListPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *WikiListPagesResponse) Reset() {
	*x = WikiListPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wiki_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WikiListPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WikiListPagesResponse) ProtoMessage() {}

func (x *WikiListPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wiki_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WikiListPagesResponse.ProtoReflect.Descriptor instead.
func (*WikiListPagesResponse) Descriptor() ([]byte, []int) {
	return file_wiki_proto_rawDescGZIP(), []int{18}
}

func (x *WikiListPagesResponse) GetPage() *WikiPage {
	if x != nil {
		return x.Page
	}
	return nil
}

var File_wiki_proto protoreflect.FileDescriptor

var file_wiki_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x69, 0x6b, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x64, 0x65,
	0x67, 0x69, 0x74, 0x78, 0x1a, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d,
	0x01, 0x0a, 0x11, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54,
	0x0a, 0x0f, 0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x08, 0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69,
	0x50, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x1b, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x57, 0x69,
	0x6b, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x15, 0x57, 0x69, 0x6b, 0x69, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x57, 0x69, 0x6b, 0x69, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x2e, 0x0a, 0x16, 0x57, 0x69, 0x6b, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x57, 0x69, 0x6b, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x57, 0x69, 0x6b, 0x69, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f,
	0x01, 0x0a, 0x13, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04,
	0x98, 0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0x3c, 0x0a, 0x14, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x7f,
	0x0a, 0x13, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69,
	0x74, 0x78, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98,
	0xc6, 0x2c, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x76, 0x0a, 0x14, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xef, 0x01, 0x0a, 0x16, 0x57, 0x69, 0x6b, 0x69,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x22, 0x23, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x01, 0x22, 0x5f, 0x0a, 0x17, 0x57, 0x69, 0x6b,
	0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x50, 0x61, 0x67, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x57,
	0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x04, 0x98, 0xc6, 0x2c,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74,
	0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x23, 0x0a, 0x06, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x01,
	0x22, 0x3d, 0x0a, 0x15, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x57, 0x69, 0x6b, 0x69, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x32,
	0xe3, 0x05, 0x0a, 0x0b, 0x57, 0x69, 0x6b, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x68, 0x0a, 0x13, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e,
	0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0d, 0x57, 0x69, 0x6b,
	0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74,
	0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x28,
	0x01, 0x12, 0x59, 0x0a, 0x0e, 0x57, 0x69, 0x6b, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b,
	0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x01, 0x28, 0x01, 0x12, 0x57, 0x0a, 0x0e,
	0x57, 0x69, 0x6b, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa,
	0x97, 0x28, 0x02, 0x08, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57,
	0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69,
	0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x57, 0x69,
	0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x67,
	0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78,
	0x2e, 0x57, 0x69, 0x6b, 0x69, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12,
	0x5c, 0x0a, 0x0f, 0x57, 0x69, 0x6b, 0x69, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28, 0x02, 0x08, 0x02, 0x30, 0x01, 0x12, 0x56, 0x0a,
	0x0d, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c,
	0x2e, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64,
	0x65, 0x67, 0x69, 0x74, 0x78, 0x2e, 0x57, 0x69, 0x6b, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xfa, 0x97, 0x28,
	0x02, 0x08, 0x02, 0x30, 0x01, 0x42, 0x23, 0x5a, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x71, 0x66,
	0x6e, 0x2f, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x64, 0x65, 0x67, 0x69, 0x74, 0x78, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wiki_proto_rawDescOnce sync.Once
	file_wiki_proto_rawDescData = file_wiki_proto_rawDesc
)

func file_wiki_proto_rawDescGZIP() []byte {
	file_wiki_proto_rawDescOnce.Do(func() {
		file_wiki_proto_rawDescData = protoimpl.X.CompressGZIP(file_wiki_proto_rawDescData)
	})
	return file_wiki_proto_rawDescData
}

var file_wiki_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wiki_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_wiki_proto_goTypes = []interface{}{
	(WikiGetAllPagesRequest_SortBy)(0),  // 0: degitx.WikiGetAllPagesRequest.SortBy
	(WikiListPagesRequest_SortBy)(0),    // 1: degitx.WikiListPagesRequest.SortBy
	(*WikiCommitDetails)(nil),           // 2: degitx.WikiCommitDetails
	(*WikiPageVersion)(nil),             // 3: degitx.WikiPageVersion
	(*WikiPage)(nil),                    // 4: degitx.WikiPage
	(*WikiGetPageVersionsRequest)(nil),  // 5: degitx.WikiGetPageVersionsRequest
	(*WikiGetPageVersionsResponse)(nil), // 6: degitx.WikiGetPageVersionsResponse
	(*WikiWritePageRequest)(nil),        // 7: degitx.WikiWritePageRequest
	(*WikiWritePageResponse)(nil),       // 8: degitx.WikiWritePageResponse
	(*WikiUpdatePageRequest)(nil),       // 9: degitx.WikiUpdatePageRequest
	(*WikiUpdatePageResponse)(nil),      // 10: degitx.WikiUpdatePageResponse
	(*WikiDeletePageRequest)(nil),       // 11: degitx.WikiDeletePageRequest
	(*WikiDeletePageResponse)(nil),      // 12: degitx.WikiDeletePageResponse
	(*WikiFindPageRequest)(nil),         // 13: degitx.WikiFindPageRequest
	(*WikiFindPageResponse)(nil),        // 14: degitx.WikiFindPageResponse
	(*WikiFindFileRequest)(nil),         // 15: degitx.WikiFindFileRequest
	(*WikiFindFileResponse)(nil),        // 16: degitx.WikiFindFileResponse
	(*WikiGetAllPagesRequest)(nil),      // 17: degitx.WikiGetAllPagesRequest
	(*WikiGetAllPagesResponse)(nil),     // 18: degitx.WikiGetAllPagesResponse
	(*WikiListPagesRequest)(nil),        // 19: degitx.WikiListPagesRequest
	(*WikiListPagesResponse)(nil),       // 20: degitx.WikiListPagesResponse
	(*GitCommit)(nil),                   // 21: degitx.GitCommit
	(*Repository)(nil),                  // 22: degitx.Repository
}
var file_wiki_proto_depIdxs = []int32{
	21, // 0: degitx.WikiPageVersion.commit:type_name -> degitx.GitCommit
	3,  // 1: degitx.WikiPage.version:type_name -> degitx.WikiPageVersion
	22, // 2: degitx.WikiGetPageVersionsRequest.repository:type_name -> degitx.Repository
	3,  // 3: degitx.WikiGetPageVersionsResponse.versions:type_name -> degitx.WikiPageVersion
	22, // 4: degitx.WikiWritePageRequest.repository:type_name -> degitx.Repository
	2,  // 5: degitx.WikiWritePageRequest.commit_details:type_name -> degitx.WikiCommitDetails
	22, // 6: degitx.WikiUpdatePageRequest.repository:type_name -> degitx.Repository
	2,  // 7: degitx.WikiUpdatePageRequest.commit_details:type_name -> degitx.WikiCommitDetails
	22, // 8: degitx.WikiDeletePageRequest.repository:type_name -> degitx.Repository
	2,  // 9: degitx.WikiDeletePageRequest.commit_details:type_name -> degitx.WikiCommitDetails
	22, // 10: degitx.WikiFindPageRequest.repository:type_name -> degitx.Repository
	4,  // 11: degitx.WikiFindPageResponse.page:type_name -> degitx.WikiPage
	22, // 12: degitx.WikiFindFileRequest.repository:type_name -> degitx.Repository
	22, // 13: degitx.WikiGetAllPagesRequest.repository:type_name -> degitx.Repository
	0,  // 14: degitx.WikiGetAllPagesRequest.sort:type_name -> degitx.WikiGetAllPagesRequest.SortBy
	4,  // 15: degitx.WikiGetAllPagesResponse.page:type_name -> degitx.WikiPage
	22, // 16: degitx.WikiListPagesRequest.repository:type_name -> degitx.Repository
	1,  // 17: degitx.WikiListPagesRequest.sort:type_name -> degitx.WikiListPagesRequest.SortBy
	4,  // 18: degitx.WikiListPagesResponse.page:type_name -> degitx.WikiPage
	5,  // 19: degitx.WikiService.WikiGetPageVersions:input_type -> degitx.WikiGetPageVersionsRequest
	7,  // 20: degitx.WikiService.WikiWritePage:input_type -> degitx.WikiWritePageRequest
	9,  // 21: degitx.WikiService.WikiUpdatePage:input_type -> degitx.WikiUpdatePageRequest
	11, // 22: degitx.WikiService.WikiDeletePage:input_type -> degitx.WikiDeletePageRequest
	13, // 23: degitx.WikiService.WikiFindPage:input_type -> degitx.WikiFindPageRequest
	15, // 24: degitx.WikiService.WikiFindFile:input_type -> degitx.WikiFindFileRequest
	17, // 25: degitx.WikiService.WikiGetAllPages:input_type -> degitx.WikiGetAllPagesRequest
	19, // 26: degitx.WikiService.WikiListPages:input_type -> degitx.WikiListPagesRequest
	6,  // 27: degitx.WikiService.WikiGetPageVersions:output_type -> degitx.WikiGetPageVersionsResponse
	8,  // 28: degitx.WikiService.WikiWritePage:output_type -> degitx.WikiWritePageResponse
	10, // 29: degitx.WikiService.WikiUpdatePage:output_type -> degitx.WikiUpdatePageResponse
	12, // 30: degitx.WikiService.WikiDeletePage:output_type -> degitx.WikiDeletePageResponse
	14, // 31: degitx.WikiService.WikiFindPage:output_type -> degitx.WikiFindPageResponse
	16, // 32: degitx.WikiService.WikiFindFile:output_type -> degitx.WikiFindFileResponse
	18, // 33: degitx.WikiService.WikiGetAllPages:output_type -> degitx.WikiGetAllPagesResponse
	20, // 34: degitx.WikiService.WikiListPages:output_type -> degitx.WikiListPagesResponse
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_wiki_proto_init() }
func file_wiki_proto_init() {
	if File_wiki_proto != nil {
		return
	}
	file_lint_proto_init()
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wiki_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiCommitDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiPageVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiGetPageVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiGetPageVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiWritePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiWritePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiUpdatePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiUpdatePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiDeletePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiDeletePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiFindPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiFindPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiFindFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiFindFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiGetAllPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiGetAllPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiListPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wiki_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WikiListPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wiki_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wiki_proto_goTypes,
		DependencyIndexes: file_wiki_proto_depIdxs,
		EnumInfos:         file_wiki_proto_enumTypes,
		MessageInfos:      file_wiki_proto_msgTypes,
	}.Build()
	File_wiki_proto = out.File
	file_wiki_proto_rawDesc = nil
	file_wiki_proto_goTypes = nil
	file_wiki_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WikiServiceClient is the client API for WikiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WikiServiceClient interface {
	WikiGetPageVersions(ctx context.Context, in *WikiGetPageVersionsRequest, opts ...grpc.CallOption) (WikiService_WikiGetPageVersionsClient, error)
	WikiWritePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiWritePageClient, error)
	WikiUpdatePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiUpdatePageClient, error)
	WikiDeletePage(ctx context.Context, in *WikiDeletePageRequest, opts ...grpc.CallOption) (*WikiDeletePageResponse, error)
	// WikiFindPage returns a stream because the page's raw_data field may be arbitrarily large.
	WikiFindPage(ctx context.Context, in *WikiFindPageRequest, opts ...grpc.CallOption) (WikiService_WikiFindPageClient, error)
	WikiFindFile(ctx context.Context, in *WikiFindFileRequest, opts ...grpc.CallOption) (WikiService_WikiFindFileClient, error)
	WikiGetAllPages(ctx context.Context, in *WikiGetAllPagesRequest, opts ...grpc.CallOption) (WikiService_WikiGetAllPagesClient, error)
	WikiListPages(ctx context.Context, in *WikiListPagesRequest, opts ...grpc.CallOption) (WikiService_WikiListPagesClient, error)
}

type wikiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiServiceClient(cc grpc.ClientConnInterface) WikiServiceClient {
	return &wikiServiceClient{cc}
}

func (c *wikiServiceClient) WikiGetPageVersions(ctx context.Context, in *WikiGetPageVersionsRequest, opts ...grpc.CallOption) (WikiService_WikiGetPageVersionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[0], "/degitx.WikiService/WikiGetPageVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiGetPageVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiGetPageVersionsClient interface {
	Recv() (*WikiGetPageVersionsResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiGetPageVersionsClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiGetPageVersionsClient) Recv() (*WikiGetPageVersionsResponse, error) {
	m := new(WikiGetPageVersionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiWritePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiWritePageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[1], "/degitx.WikiService/WikiWritePage", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiWritePageClient{stream}
	return x, nil
}

type WikiService_WikiWritePageClient interface {
	Send(*WikiWritePageRequest) error
	CloseAndRecv() (*WikiWritePageResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiWritePageClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiWritePageClient) Send(m *WikiWritePageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wikiServiceWikiWritePageClient) CloseAndRecv() (*WikiWritePageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WikiWritePageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiUpdatePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiUpdatePageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[2], "/degitx.WikiService/WikiUpdatePage", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiUpdatePageClient{stream}
	return x, nil
}

type WikiService_WikiUpdatePageClient interface {
	Send(*WikiUpdatePageRequest) error
	CloseAndRecv() (*WikiUpdatePageResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiUpdatePageClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiUpdatePageClient) Send(m *WikiUpdatePageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wikiServiceWikiUpdatePageClient) CloseAndRecv() (*WikiUpdatePageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WikiUpdatePageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiDeletePage(ctx context.Context, in *WikiDeletePageRequest, opts ...grpc.CallOption) (*WikiDeletePageResponse, error) {
	out := new(WikiDeletePageResponse)
	err := c.cc.Invoke(ctx, "/degitx.WikiService/WikiDeletePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) WikiFindPage(ctx context.Context, in *WikiFindPageRequest, opts ...grpc.CallOption) (WikiService_WikiFindPageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[3], "/degitx.WikiService/WikiFindPage", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiFindPageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiFindPageClient interface {
	Recv() (*WikiFindPageResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiFindPageClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiFindPageClient) Recv() (*WikiFindPageResponse, error) {
	m := new(WikiFindPageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiFindFile(ctx context.Context, in *WikiFindFileRequest, opts ...grpc.CallOption) (WikiService_WikiFindFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[4], "/degitx.WikiService/WikiFindFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiFindFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiFindFileClient interface {
	Recv() (*WikiFindFileResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiFindFileClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiFindFileClient) Recv() (*WikiFindFileResponse, error) {
	m := new(WikiFindFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiGetAllPages(ctx context.Context, in *WikiGetAllPagesRequest, opts ...grpc.CallOption) (WikiService_WikiGetAllPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[5], "/degitx.WikiService/WikiGetAllPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiGetAllPagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiGetAllPagesClient interface {
	Recv() (*WikiGetAllPagesResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiGetAllPagesClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiGetAllPagesClient) Recv() (*WikiGetAllPagesResponse, error) {
	m := new(WikiGetAllPagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiListPages(ctx context.Context, in *WikiListPagesRequest, opts ...grpc.CallOption) (WikiService_WikiListPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[6], "/degitx.WikiService/WikiListPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiListPagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiListPagesClient interface {
	Recv() (*WikiListPagesResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiListPagesClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiListPagesClient) Recv() (*WikiListPagesResponse, error) {
	m := new(WikiListPagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WikiServiceServer is the server API for WikiService service.
type WikiServiceServer interface {
	WikiGetPageVersions(*WikiGetPageVersionsRequest, WikiService_WikiGetPageVersionsServer) error
	WikiWritePage(WikiService_WikiWritePageServer) error
	WikiUpdatePage(WikiService_WikiUpdatePageServer) error
	WikiDeletePage(context.Context, *WikiDeletePageRequest) (*WikiDeletePageResponse, error)
	// WikiFindPage returns a stream because the page's raw_data field may be arbitrarily large.
	WikiFindPage(*WikiFindPageRequest, WikiService_WikiFindPageServer) error
	WikiFindFile(*WikiFindFileRequest, WikiService_WikiFindFileServer) error
	WikiGetAllPages(*WikiGetAllPagesRequest, WikiService_WikiGetAllPagesServer) error
	WikiListPages(*WikiListPagesRequest, WikiService_WikiListPagesServer) error
}

// UnimplementedWikiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWikiServiceServer struct {
}

func (*UnimplementedWikiServiceServer) WikiGetPageVersions(*WikiGetPageVersionsRequest, WikiService_WikiGetPageVersionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiGetPageVersions not implemented")
}
func (*UnimplementedWikiServiceServer) WikiWritePage(WikiService_WikiWritePageServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiWritePage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiUpdatePage(WikiService_WikiUpdatePageServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiUpdatePage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiDeletePage(context.Context, *WikiDeletePageRequest) (*WikiDeletePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WikiDeletePage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiFindPage(*WikiFindPageRequest, WikiService_WikiFindPageServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiFindPage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiFindFile(*WikiFindFileRequest, WikiService_WikiFindFileServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiFindFile not implemented")
}
func (*UnimplementedWikiServiceServer) WikiGetAllPages(*WikiGetAllPagesRequest, WikiService_WikiGetAllPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiGetAllPages not implemented")
}
func (*UnimplementedWikiServiceServer) WikiListPages(*WikiListPagesRequest, WikiService_WikiListPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiListPages not implemented")
}

func RegisterWikiServiceServer(s *grpc.Server, srv WikiServiceServer) {
	s.RegisterService(&_WikiService_serviceDesc, srv)
}

func _WikiService_WikiGetPageVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiGetPageVersionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiGetPageVersions(m, &wikiServiceWikiGetPageVersionsServer{stream})
}

type WikiService_WikiGetPageVersionsServer interface {
	Send(*WikiGetPageVersionsResponse) error
	grpc.ServerStream
}

type wikiServiceWikiGetPageVersionsServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiGetPageVersionsServer) Send(m *WikiGetPageVersionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WikiService_WikiWritePage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WikiServiceServer).WikiWritePage(&wikiServiceWikiWritePageServer{stream})
}

type WikiService_WikiWritePageServer interface {
	SendAndClose(*WikiWritePageResponse) error
	Recv() (*WikiWritePageRequest, error)
	grpc.ServerStream
}

type wikiServiceWikiWritePageServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiWritePageServer) SendAndClose(m *WikiWritePageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wikiServiceWikiWritePageServer) Recv() (*WikiWritePageRequest, error) {
	m := new(WikiWritePageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WikiService_WikiUpdatePage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WikiServiceServer).WikiUpdatePage(&wikiServiceWikiUpdatePageServer{stream})
}

type WikiService_WikiUpdatePageServer interface {
	SendAndClose(*WikiUpdatePageResponse) error
	Recv() (*WikiUpdatePageRequest, error)
	grpc.ServerStream
}

type wikiServiceWikiUpdatePageServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiUpdatePageServer) SendAndClose(m *WikiUpdatePageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wikiServiceWikiUpdatePageServer) Recv() (*WikiUpdatePageRequest, error) {
	m := new(WikiUpdatePageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WikiService_WikiDeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WikiDeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).WikiDeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/degitx.WikiService/WikiDeletePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).WikiDeletePage(ctx, req.(*WikiDeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_WikiFindPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiFindPageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiFindPage(m, &wikiServiceWikiFindPageServer{stream})
}

type WikiService_WikiFindPageServer interface {
	Send(*WikiFindPageResponse) error
	grpc.ServerStream
}

type wikiServiceWikiFindPageServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiFindPageServer) Send(m *WikiFindPageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WikiService_WikiFindFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiFindFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiFindFile(m, &wikiServiceWikiFindFileServer{stream})
}

type WikiService_WikiFindFileServer interface {
	Send(*WikiFindFileResponse) error
	grpc.ServerStream
}

type wikiServiceWikiFindFileServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiFindFileServer) Send(m *WikiFindFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WikiService_WikiGetAllPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiGetAllPagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiGetAllPages(m, &wikiServiceWikiGetAllPagesServer{stream})
}

type WikiService_WikiGetAllPagesServer interface {
	Send(*WikiGetAllPagesResponse) error
	grpc.ServerStream
}

type wikiServiceWikiGetAllPagesServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiGetAllPagesServer) Send(m *WikiGetAllPagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WikiService_WikiListPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiListPagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiListPages(m, &wikiServiceWikiListPagesServer{stream})
}

type WikiService_WikiListPagesServer interface {
	Send(*WikiListPagesResponse) error
	grpc.ServerStream
}

type wikiServiceWikiListPagesServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiListPagesServer) Send(m *WikiListPagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _WikiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "degitx.WikiService",
	HandlerType: (*WikiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WikiDeletePage",
			Handler:    _WikiService_WikiDeletePage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WikiGetPageVersions",
			Handler:       _WikiService_WikiGetPageVersions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WikiWritePage",
			Handler:       _WikiService_WikiWritePage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WikiUpdatePage",
			Handler:       _WikiService_WikiUpdatePage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WikiFindPage",
			Handler:       _WikiService_WikiFindPage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WikiFindFile",
			Handler:       _WikiService_WikiFindFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WikiGetAllPages",
			Handler:       _WikiService_WikiGetAllPages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WikiListPages",
			Handler:       _WikiService_WikiListPages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wiki.proto",
}
