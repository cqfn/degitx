\documentclass[acmlarge, screen, nonacm]{acmart}
\usepackage[utf8]{inputenc}
\usepackage{float}
\usepackage{setspace}
\usepackage{pgfplots}
\usepackage{graphicx}
\usepackage{fancyvrb}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{hyperref}
  \hypersetup{colorlinks=true,allcolors=blue!40!black}
\setlength{\topskip}{6pt}
\setlength{\parindent}{0pt} % indent first line
\setlength{\parskip}{6pt} % before par

\title{Three phase commit consistency evaluation for git repository replication}

\author{Ilya Moskvitin}
\email{TODO: put your email address here}

\author{Kirill Chernyavskiy}
\email{g4s8.public@gmail.com}

\acmBooktitle{none}
\acmConference{none}
\editor{none}

\begin{document}

\begin{abstract}
  For git repository replication distributed system we need to use atomic
  commit implementation based on git reference transaction hooks (todo: add reference to previous report).
  There are three most popular protocols: two-phase commit (2PC), three-phase commit protocols (3PC) family,
  and Paxos commit protocol. 2PC protocol is not really fault tolerant, since it may turn storage
  replicas into inconsistent state in case of transaction manager (TM) failure. Paxos-commit is a fault-tolerant
  version of transaction commit protocol. But it pays for fault-tolerance by sending much more messages via network
  for distributing the resource manager (RM) votes: \texttt{3N - 3} messages for 2PC vs
  \texttt{(N - 1)(2F + 3)} messages for Paxos commit co-located faster version (where N is number of nodes,
  and F is a number of tolerated faults)
  (todo: add references  J. Gray and L. Lamport, â€œConsensus on transaction commit).
  Different versions of 3PC protocols family claims to fix possible inconsistency by appending
  a new state ``prepared-to-commit'', and by allowing the
  quorum of replicas to not block on the transacion in case if some RM failure.
  In this report we evaluate 3PC and compare it with Paxos-commit to analyze which one is better for
  git repository replication system.
\end{abstract}

\maketitle

\section{Problem}

3PC was introduced by (todo: add authors and initial publication). The motivation of creating 3PC was to fix
a problem with 2PC, which can not recover from some kind of failures. For instance, if a TM receives a ``prepared''
message from all RMs, decides to commit, and sends a ``commit'' message to one of the RM (let's say RM1),
and the crashes, the secondary TM can be started in another network region which can't access RM1 to continue the transaction,
and this secondary TM will not be able to access RM1 and decides to abort the transaction by sending ``abort'' message
to RMs except RM1, then RMs will have different state after the transaction.
The 3PC protocol fixes this problem by introducing new kind of message: ``prepared to commit''. If TM fails before sending
this message, the secondary TM will abort the transaction if at least one RM is not in ``prepared to commit'' state
(todo: describe more verbosly).

Let's define a metrics to compare these two algorithms:
\begin{enumerate}
  \item Message delays - the number of total messages round-trips between nodes
  \item Message count - the number of messages sent in the system to commit the transacion
  \item Message model - what kind of message model does the algorithm support: synchronous, partially
    synchronous or asynchronous
  \item Fault tolerance - the number of nodes that may fail and keep the system working
  \item Complexity - the number of modules on deployments requires for transaction management
\end{enumerate}

Paxos commit protocol with co-located acceptor nodes (acceptors are deployed to same node as a RM),
has two versions: just a ``Paxos commit'' and ``Faster Paxos commit''; the difference between them
is in balance between message delays and message count: faster version has fewer message delays
but requires more messages to be sent. The formulas for Paxos commit were taken from the
consensus-on-transaction-commit (todo: add cite) paper. Paxos commit requires 5 message delays,
and $N(N+3)-3$ messages to commit the transaction; faster version requires 4 delays, and
$(N-1)(2F+3)$ messages; both versions works in partially-synchronous (P-S) network model,
can tolerate $F$ number of failures, this number should be less than $(N/2)+1$ and it affects
messages count; and it requires 4 components for deployment: RM, TM, and one Paxos instance per
RM deployment (co-located version), where each deployment consists of one proposer and $N$ acceptors.

The comparison of these three protocols
are presented at~figure~\ref{fig:compare-3pc-pc-fpc}, where $N$ is a number of nodes, and $F$ is a number of
failures that system can tolerate.

\begin{figure}
  \begin{tabular}{r | l | l | l | l | l}
    Protocol & Delays & Count & Model & Fault tolerance & Complexity \\
    \hline
    PC  & 5 & $N(F+3)-3$    & P-S & $F>N/2+1$ & 4   \\
    \hline
    FPC & 4 & $(N-1)(2F+3)$ & --- & --- & --- \\
    \hline
    3PC & todo & todo & todo & todo & todo \\
    \hline
  \end{tabular}
  \caption{
    Comparing 3PC with Paxos-commit and Faster Paxos-commit
  }\label{fig:compare-3pc-pc-fpc}
\end{figure}

To calculate the message delays and count let's describe all steps required to complete transaction successfully in
positive case scenario for generic 3PC protocol; Assuming we have $N$ resource managers (RM) and transaction is
started when any received an initial data which can be applied to the RM, and the system has the only transaction
manager (TM):
\begin{enumerate}
  \item RM initiates the transaction by sending ``prepared'' message to TM ($1$ message)
  \item TM sends ``prepare'' command to other RMs ($N-1$ message)
  \item RMs who received the command replies with ``prepared'' message to TM ($N-1$ messages)
  \item TM sends ``prepare to commit'' command to all RMs ($N$ messages)
  \item All RMs replies with ``prepared to commit'' message ($N$ messages)
  \item TM sends a ``commit'' command ($N$ messages)
\end{enumerate}

So to commit the transaction 3PC requires 6 message delays and $5N-1$ messages.

\section{Related works}

(todo: describe 3PC papers, paxos-commit about 3PC).

\section{Solution}

3PC could be used as a distributed commit protocol for git transactions. (todo: add diagrams).
\begin{itemize}
  \item Client pushes new changes to coordinator node
  \item Coordinator sends these changes to all RMs
  \item Each RM starts applying these changes and calls reference-transaction hook process with the result (prepared
    in case if transaction was validated and can be applied; aborted otherwise).
  \item Hook calls RM process with a decicion and waits for the signal from RM.
  \item (todo: explain 3PC here)
  \item RM notifies the hook process to continue with decided by TM status
  \item Hook exits with specified status: 0 - for success, 1 - for abort
  \item Git finish transaction if the hook exited with 0 status, or cancel it on abort; after that it
    calls hook again to notify completion
  \item Hook notify RM process about transaction finish
  \item RM notifies TM coordinator about finish transaction
\end{itemize}

To evaluate the 3PC protocol in this workflow, we've created a $TLA_{+}$ model and checker
(todo: create the model, add to appendix).

It shows that 3PC in git repository transaction could be broken by these paths: (todo: describe paths).

\section{Conclusion}

(todo: analyze the result of paths and show the risks how it affects git repository consistency.)

\end{document}
